/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_contactdb_recipients`]
#[derive(Clone, Debug, Default)]
pub struct DEleteContactdbRecipientsParams {
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`d_elete_contactdb_recipients_recipient_id`]
#[derive(Clone, Debug, Default)]
pub struct DEleteContactdbRecipientsRecipientIdParams {
    /// The ID of the recipient that you want to retrieve.
    pub recipient_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_recipients`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbRecipientsParams {
    /// Page index of first recipients to return (must be a positive integer)
    pub page: Option<serde_json::Value>,
    /// Number of recipients to return at a time (must be a positive integer between 1 and 1000)
    pub page_size: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_recipients_billable_count`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbRecipientsBillableCountParams {
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_recipients_count`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbRecipientsCountParams {
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_recipients_recipient_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbRecipientsRecipientIdParams {
    /// The ID of the recipient that you want to retrieve.
    pub recipient_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_recipients_recipient_id_lists`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbRecipientsRecipientIdListsParams {
    /// The ID of the recipient for whom you are retrieving lists.
    pub recipient_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_recipients_search`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbRecipientsSearchParams {
    pub left_curly_bracket_field_name_right_curly_bracket: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_status`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbStatusParams {
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_atch_contactdb_recipients`]
#[derive(Clone, Debug, Default)]
pub struct PAtchContactdbRecipientsParams {
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_ost_contactdb_recipients`]
#[derive(Clone, Debug, Default)]
pub struct POstContactdbRecipientsParams {
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_ost_contactdb_recipients_search`]
#[derive(Clone, Debug, Default)]
pub struct POstContactdbRecipientsSearchParams {
    pub post_contactdb_recipients_search_request: Option<crate::models::PostContactdbRecipientsSearchRequest>
}


/// struct for typed errors of method [`d_elete_contactdb_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteContactdbRecipientsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_elete_contactdb_recipients_recipient_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteContactdbRecipientsRecipientIdError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbRecipientsError {
    Status400(serde_json::Value),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_recipients_billable_count`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbRecipientsBillableCountError {
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_recipients_count`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbRecipientsCountError {
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_recipients_recipient_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbRecipientsRecipientIdError {
    Status400(serde_json::Value),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_recipients_recipient_id_lists`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbRecipientsRecipientIdListsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_recipients_search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbRecipientsSearchError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbStatusError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_contactdb_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchContactdbRecipientsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_contactdb_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstContactdbRecipientsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_contactdb_recipients_search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstContactdbRecipientsSearchError {
    Status400(),
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to deletes one or more recipients.**  The body of an API call to this endpoint must include an array of recipient IDs of the recipients you want to delete.
pub async fn d_elete_contactdb_recipients(configuration: &configuration::Configuration, params: DEleteContactdbRecipientsParams) -> Result<serde_json::Value, Error<DEleteContactdbRecipientsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteContactdbRecipientsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to delete a single recipient with the given ID from your contact database.**  > Use this to permanently delete your recipients from all of your contact lists and all segments if required by applicable law.
pub async fn d_elete_contactdb_recipients_recipient_id(configuration: &configuration::Configuration, params: DEleteContactdbRecipientsRecipientIdParams) -> Result<serde_json::Value, Error<DEleteContactdbRecipientsRecipientIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let recipient_id = params.recipient_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients/{recipient_id}", local_var_configuration.base_path, recipient_id=recipient_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteContactdbRecipientsRecipientIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all of your Marketing Campaigns recipients.**  Batch deletion of a page makes it possible to receive an empty page of recipients before reaching the end of the list of recipients. To avoid this issue; iterate over pages until a 404 is retrieved.
pub async fn g_et_contactdb_recipients(configuration: &configuration::Configuration, params: GEtContactdbRecipientsParams) -> Result<crate::models::ListRecipientsResponse, Error<GEtContactdbRecipientsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page = params.page;
    let page_size = params.page_size;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbRecipientsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve the number of Marketing Campaigns recipients that you will be billed for.**  You are billed for marketing campaigns based on the highest number of recipients you have had in your account at one time. This endpoint will allow you to know the current billable count value.
pub async fn g_et_contactdb_recipients_billable_count(configuration: &configuration::Configuration, params: GEtContactdbRecipientsBillableCountParams) -> Result<crate::models::ContactdbRecipientCount, Error<GEtContactdbRecipientsBillableCountError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients/billable_count", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbRecipientsBillableCountError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve the total number of Marketing Campaigns recipients.**
pub async fn g_et_contactdb_recipients_count(configuration: &configuration::Configuration, params: GEtContactdbRecipientsCountParams) -> Result<crate::models::ContactdbRecipientCount, Error<GEtContactdbRecipientsCountError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients/count", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbRecipientsCountError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a single recipient by ID from your contact database.**
pub async fn g_et_contactdb_recipients_recipient_id(configuration: &configuration::Configuration, params: GEtContactdbRecipientsRecipientIdParams) -> Result<crate::models::ContactdbRecipient, Error<GEtContactdbRecipientsRecipientIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let recipient_id = params.recipient_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients/{recipient_id}", local_var_configuration.base_path, recipient_id=recipient_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbRecipientsRecipientIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve the lists that a given recipient belongs to.**  Each recipient can be on many lists. This endpoint gives you all of the lists that any one recipient has been added to.
pub async fn g_et_contactdb_recipients_recipient_id_lists(configuration: &configuration::Configuration, params: GEtContactdbRecipientsRecipientIdListsParams) -> Result<crate::models::GetContactdbRecipientsRecipientIdLists200Response, Error<GEtContactdbRecipientsRecipientIdListsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let recipient_id = params.recipient_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients/{recipient_id}/lists", local_var_configuration.base_path, recipient_id=recipient_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbRecipientsRecipientIdListsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to perform a search on all of your Marketing Campaigns recipients.**  field_name:  * is a variable that is substituted for your actual custom field name from your recipient. * Text fields must be url-encoded. Date fields are searchable only by unix timestamp (e.g. 2/2/2015 becomes 1422835200) * If field_name is a 'reserved' date field, such as created_at or updated_at, the system will internally convert your epoch time to a date range encompassing the entire day. For example, an epoch time of 1422835600 converts to Mon, 02 Feb 2015 00:06:40 GMT, but internally the system will search from Mon, 02 Feb 2015 00:00:00 GMT through Mon, 02 Feb 2015 23:59:59 GMT.
pub async fn g_et_contactdb_recipients_search(configuration: &configuration::Configuration, params: GEtContactdbRecipientsSearchParams) -> Result<crate::models::GetContactdbListsListIdRecipients200Response, Error<GEtContactdbRecipientsSearchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let left_curly_bracket_field_name_right_curly_bracket = params.left_curly_bracket_field_name_right_curly_bracket;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients/search", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = left_curly_bracket_field_name_right_curly_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("{field_name}", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbRecipientsSearchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to check the upload status of a Marketing Campaigns recipient.**
pub async fn g_et_contactdb_status(configuration: &configuration::Configuration, params: GEtContactdbStatusParams) -> Result<crate::models::GetContactdbStatus200Response, Error<GEtContactdbStatusError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/status", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbStatusError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to update one or more recipients.**  The body of an API call to this endpoint must include an array of one or more recipient objects.  It is of note that you can add custom field data as parameters on recipient objects. We have provided an example using some of the default custom fields SendGrid provides.
pub async fn p_atch_contactdb_recipients(configuration: &configuration::Configuration, params: PAtchContactdbRecipientsParams) -> Result<crate::models::ContactdbRecipientResponse, Error<PAtchContactdbRecipientsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchContactdbRecipientsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to add a Marketing Campaigns recipient.**  You can add custom field data as a parameter on this endpoint. We have provided an example using some of the default custom fields SendGrid provides.  The rate limit is three requests every 2 seconds. You can upload 1000  contacts per request. So the maximum upload rate is 1500 recipients per second.
pub async fn p_ost_contactdb_recipients(configuration: &configuration::Configuration, params: POstContactdbRecipientsParams) -> Result<crate::models::ContactdbRecipientResponse, Error<POstContactdbRecipientsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstContactdbRecipientsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>   Search using segment conditions without actually creating a segment.   Body contains a JSON object with <code>conditions</code>, a list of conditions as described below, and an optional <code>list_id</code>, which is a valid list ID for a list to limit the search on. </p>  <p>   Valid operators for create and update depend on the type of the field for which you are searching. </p>  <ul>   <li>Dates:     <ul>       <li>\"eq\", \"ne\", \"lt\" (before), \"gt\" (after)         <ul>           <li>You may use MM/DD/YYYY for day granularity or an epoch for second granularity.</li>         </ul>       </li>       <li>\"empty\", \"not_empty\"</li>       <li>\"is within\"         <ul>           <li>You may use an <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a> or the # of days.</li>         </ul>       </li>     </ul>   </li>   <li>Text: \"contains\", \"eq\" (is - matches the full field), \"ne\" (is not - matches any field where the entire field is not the condition value), \"empty\", \"not_empty\"</li>   <li>Numbers: \"eq\", \"lt\", \"gt\", \"empty\", \"not_empty\"</li>   <li>Email Clicks and Opens: \"eq\" (opened), \"ne\" (not opened)</li> </ul>  <p>   Field values must all be a string. </p>  <p>   Search conditions using \"eq\" or \"ne\" for email clicks and opens should provide a \"field\" of either <code>clicks.campaign_identifier</code> or <code>opens.campaign_identifier</code>.   The condition value should be a string containing the id of a completed campaign. </p>  <p>   Search conditions list may contain multiple conditions, joined by an \"and\" or \"or\" in the \"and_or\" field.   The first condition in the conditions list must have an empty \"and_or\", and subsequent conditions must all specify an \"and_or\". </p>
pub async fn p_ost_contactdb_recipients_search(configuration: &configuration::Configuration, params: POstContactdbRecipientsSearchParams) -> Result<crate::models::PostContactdbRecipientsSearch200Response, Error<POstContactdbRecipientsSearchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let post_contactdb_recipients_search_request = params.post_contactdb_recipients_search_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/recipients/search", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&post_contactdb_recipients_search_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstContactdbRecipientsSearchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

