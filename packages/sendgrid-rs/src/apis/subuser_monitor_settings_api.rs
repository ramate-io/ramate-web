/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_subusers_subuser_name_monitor`]
#[derive(Clone, Debug, Default)]
pub struct DEleteSubusersSubuserNameMonitorParams {
    /// The name of the subuser for which to retrieve monitor settings.
    pub subuser_name: serde_json::Value
}

/// struct for passing parameters to the method [`g_et_subusers_subuser_name_monitor`]
#[derive(Clone, Debug, Default)]
pub struct GEtSubusersSubuserNameMonitorParams {
    /// The name of the subuser for which to retrieve monitor settings.
    pub subuser_name: serde_json::Value
}

/// struct for passing parameters to the method [`p_ost_subusers_subuser_name_monitor`]
#[derive(Clone, Debug, Default)]
pub struct POstSubusersSubuserNameMonitorParams {
    /// The name of the subuser for which to retrieve monitor settings.
    pub subuser_name: serde_json::Value,
    pub monitor: Option<crate::models::Monitor>
}

/// struct for passing parameters to the method [`p_ut_subusers_subuser_name_monitor`]
#[derive(Clone, Debug, Default)]
pub struct PUtSubusersSubuserNameMonitorParams {
    /// The name of the subuser for which to retrieve monitor settings.
    pub subuser_name: serde_json::Value,
    pub monitor: Option<crate::models::Monitor>
}


/// struct for typed errors of method [`d_elete_subusers_subuser_name_monitor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteSubusersSubuserNameMonitorError {
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_subusers_subuser_name_monitor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSubusersSubuserNameMonitorError {
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_subusers_subuser_name_monitor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstSubusersSubuserNameMonitorError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ut_subusers_subuser_name_monitor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PUtSubusersSubuserNameMonitorError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}


pub async fn d_elete_subusers_subuser_name_monitor(configuration: &configuration::Configuration, params: DEleteSubusersSubuserNameMonitorParams) -> Result<serde_json::Value, Error<DEleteSubusersSubuserNameMonitorError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let subuser_name = params.subuser_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/{subuser_name}/monitor", local_var_configuration.base_path, subuser_name=subuser_name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteSubusersSubuserNameMonitorError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn g_et_subusers_subuser_name_monitor(configuration: &configuration::Configuration, params: GEtSubusersSubuserNameMonitorParams) -> Result<crate::models::Monitor, Error<GEtSubusersSubuserNameMonitorError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let subuser_name = params.subuser_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/{subuser_name}/monitor", local_var_configuration.base_path, subuser_name=subuser_name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSubusersSubuserNameMonitorError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn p_ost_subusers_subuser_name_monitor(configuration: &configuration::Configuration, params: POstSubusersSubuserNameMonitorParams) -> Result<crate::models::Monitor, Error<POstSubusersSubuserNameMonitorError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let subuser_name = params.subuser_name;
    let monitor = params.monitor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/{subuser_name}/monitor", local_var_configuration.base_path, subuser_name=subuser_name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&monitor);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstSubusersSubuserNameMonitorError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn p_ut_subusers_subuser_name_monitor(configuration: &configuration::Configuration, params: PUtSubusersSubuserNameMonitorParams) -> Result<crate::models::Monitor, Error<PUtSubusersSubuserNameMonitorError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let subuser_name = params.subuser_name;
    let monitor = params.monitor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/{subuser_name}/monitor", local_var_configuration.base_path, subuser_name=subuser_name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&monitor);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PUtSubusersSubuserNameMonitorError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

