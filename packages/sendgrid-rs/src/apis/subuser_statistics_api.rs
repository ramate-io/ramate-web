/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`g_et_subusers_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtSubusersStatsParams {
    /// The subuser you want to retrieve statistics for. You may include this parameter up to 10 times to retrieve statistics for multiple subusers.
    pub subusers: serde_json::Value,
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    /// Limits the number of results returned per page.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results from.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today.
    pub end_date: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_subusers_stats_monthly`]
#[derive(Clone, Debug, Default)]
pub struct GEtSubusersStatsMonthlyParams {
    /// The date of the month to retrieve statistics for. Must be formatted YYYY-MM-DD
    pub date: serde_json::Value,
    /// A substring search of your subusers.
    pub subuser: Option<serde_json::Value>,
    /// The metric that you want to sort by. Metrics that you can sort by are: `blocks`, `bounces`, `clicks`, `delivered`, `opens`, `requests`, `unique_clicks`, `unique_opens`, and `unsubscribes`.'
    pub sort_by_metric: Option<serde_json::Value>,
    /// The direction you want to sort.
    pub sort_by_direction: Option<serde_json::Value>,
    /// Optional field to limit the number of results returned.
    pub limit: Option<serde_json::Value>,
    /// Optional beginning point in the list to retrieve from.
    pub offset: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_subusers_stats_sums`]
#[derive(Clone, Debug, Default)]
pub struct GEtSubusersStatsSumsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    /// The direction you want to sort. 
    pub sort_by_direction: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>,
    /// Limits the number of results returned per page.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results from.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Defaults to today. Must follow format YYYY-MM-DD.
    pub aggregated_by: Option<serde_json::Value>,
    /// The metric that you want to sort by.  Must be a single metric.
    pub sort_by_metric: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_subusers_subuser_name_stats_monthly`]
#[derive(Clone, Debug, Default)]
pub struct GEtSubusersSubuserNameStatsMonthlyParams {
    /// The date of the month to retrieve statistics for. Must be formatted YYYY-MM-DD
    pub date: serde_json::Value,
    pub subuser_name: serde_json::Value,
    /// The metric that you want to sort by. Metrics that you can sort by are: `blocks`, `bounces`, `clicks`, `delivered`, `opens`, `requests`, `unique_clicks`, `unique_opens`, and `unsubscribes`.'
    pub sort_by_metric: Option<serde_json::Value>,
    /// The direction you want to sort.
    pub sort_by_direction: Option<serde_json::Value>,
    /// Optional field to limit the number of results returned.
    pub limit: Option<serde_json::Value>,
    /// Optional beginning point in the list to retrieve from.
    pub offset: Option<serde_json::Value>
}


/// struct for typed errors of method [`g_et_subusers_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSubusersStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_subusers_stats_monthly`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSubusersStatsMonthlyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_subusers_stats_sums`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSubusersStatsSumsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_subusers_subuser_name_stats_monthly`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSubusersSubuserNameStatsMonthlyError {
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to retrieve the email statistics for the given subusers.**  You may retrieve statistics for up to 10 different subusers by including an additional _subusers_ parameter for each additional subuser.
pub async fn g_et_subusers_stats(configuration: &configuration::Configuration, params: GEtSubusersStatsParams) -> Result<serde_json::Value, Error<GEtSubusersStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let subusers = params.subusers;
    let start_date = params.start_date;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let end_date = params.end_date;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("subusers", &subusers.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSubusersStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve the monthly email statistics for all subusers over the given date range.**  When using the `sort_by_metric` to sort your stats by a specific metric, you can not sort by the following metrics: `bounce_drops`, `deferred`, `invalid_emails`, `processed`, `spam_report_drops`, `spam_reports`, or `unsubscribe_drops`.
pub async fn g_et_subusers_stats_monthly(configuration: &configuration::Configuration, params: GEtSubusersStatsMonthlyParams) -> Result<crate::models::SubuserStats, Error<GEtSubusersStatsMonthlyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let date = params.date;
    let subuser = params.subuser;
    let sort_by_metric = params.sort_by_metric;
    let sort_by_direction = params.sort_by_direction;
    let limit = params.limit;
    let offset = params.offset;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/stats/monthly", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("date", &date.to_string())]);
    if let Some(ref local_var_str) = subuser {
        local_var_req_builder = local_var_req_builder.query(&[("subuser", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by_metric {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_metric", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by_direction {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_direction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSubusersStatsMonthlyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve the total sums of each email statistic metric for all subusers over the given date range.**
pub async fn g_et_subusers_stats_sums(configuration: &configuration::Configuration, params: GEtSubusersStatsSumsParams) -> Result<crate::models::CategoryStats, Error<GEtSubusersStatsSumsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let sort_by_direction = params.sort_by_direction;
    let end_date = params.end_date;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let sort_by_metric = params.sort_by_metric;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/stats/sums", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sort_by_direction {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_direction", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by_metric {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_metric", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSubusersStatsSumsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrive the monthly email statistics for a specific subuser.**  When using the `sort_by_metric` to sort your stats by a specific metric, you can not sort by the following metrics: `bounce_drops`, `deferred`, `invalid_emails`, `processed`, `spam_report_drops`, `spam_reports`, or `unsubscribe_drops`.
pub async fn g_et_subusers_subuser_name_stats_monthly(configuration: &configuration::Configuration, params: GEtSubusersSubuserNameStatsMonthlyParams) -> Result<crate::models::SubuserStats, Error<GEtSubusersSubuserNameStatsMonthlyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let date = params.date;
    let subuser_name = params.subuser_name;
    let sort_by_metric = params.sort_by_metric;
    let sort_by_direction = params.sort_by_direction;
    let limit = params.limit;
    let offset = params.offset;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/subusers/{subuser_name}/stats/monthly", local_var_configuration.base_path, subuser_name=subuser_name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("date", &date.to_string())]);
    if let Some(ref local_var_str) = sort_by_metric {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_metric", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by_direction {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_direction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSubusersSubuserNameStatsMonthlyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

