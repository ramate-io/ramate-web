/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_suppression_bounces`]
#[derive(Clone, Debug, Default)]
pub struct DEleteSuppressionBouncesParams {
    pub on_behalf_of: Option<serde_json::Value>,
    pub delete_suppression_bounces_request: Option<crate::models::DeleteSuppressionBouncesRequest>
}

/// struct for passing parameters to the method [`d_elete_suppression_bounces_email`]
#[derive(Clone, Debug, Default)]
pub struct DEleteSuppressionBouncesEmailParams {
    /// The email address you would like to remove from the bounce list.
    pub email_address: serde_json::Value,
    pub email: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_suppression_bounces`]
#[derive(Clone, Debug, Default)]
pub struct GEtSuppressionBouncesParams {
    pub accept: serde_json::Value,
    /// Refers start of the time range in unix timestamp when a bounce was created (inclusive).
    pub start_time: Option<serde_json::Value>,
    /// Refers end of the time range in unix timestamp when a bounce was created (inclusive).
    pub end_time: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_suppression_bounces_email`]
#[derive(Clone, Debug, Default)]
pub struct GEtSuppressionBouncesEmailParams {
    pub email: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}


/// struct for typed errors of method [`d_elete_suppression_bounces`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteSuppressionBouncesError {
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_elete_suppression_bounces_email`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteSuppressionBouncesEmailError {
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_suppression_bounces`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSuppressionBouncesError {
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_suppression_bounces_email`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSuppressionBouncesEmailError {
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to delete all emails on your bounces list.**  There are two options for deleting bounced emails:   1. You can delete all bounced emails by setting `delete_all` to `true` in the request body.  2. You can delete a selection of bounced emails by specifying the email addresses in the `emails` array of the request body.
pub async fn d_elete_suppression_bounces(configuration: &configuration::Configuration, params: DEleteSuppressionBouncesParams) -> Result<serde_json::Value, Error<DEleteSuppressionBouncesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;
    let delete_suppression_bounces_request = params.delete_suppression_bounces_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/suppression/bounces", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&delete_suppression_bounces_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteSuppressionBouncesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to remove an email address from your bounce list.**
pub async fn d_elete_suppression_bounces_email(configuration: &configuration::Configuration, params: DEleteSuppressionBouncesEmailParams) -> Result<serde_json::Value, Error<DEleteSuppressionBouncesEmailError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let email_address = params.email_address;
    let email = params.email;
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/suppression/bounces/{email}", local_var_configuration.base_path, email=email);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("email_address", &email_address.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteSuppressionBouncesEmailError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all of your bounces.**
pub async fn g_et_suppression_bounces(configuration: &configuration::Configuration, params: GEtSuppressionBouncesParams) -> Result<serde_json::Value, Error<GEtSuppressionBouncesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let accept = params.accept;
    let start_time = params.start_time;
    let end_time = params.end_time;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/suppression/bounces", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = start_time {
        local_var_req_builder = local_var_req_builder.query(&[("start_time", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_time {
        local_var_req_builder = local_var_req_builder.query(&[("end_time", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("Accept", accept.to_string());
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSuppressionBouncesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a specific bounce by email address.**
pub async fn g_et_suppression_bounces_email(configuration: &configuration::Configuration, params: GEtSuppressionBouncesEmailParams) -> Result<serde_json::Value, Error<GEtSuppressionBouncesEmailError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let email = params.email;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/suppression/bounces/{email}", local_var_configuration.base_path, email=email);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSuppressionBouncesEmailError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

