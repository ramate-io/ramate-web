/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_contactdb_lists`]
#[derive(Clone, Debug, Default)]
pub struct DEleteContactdbListsParams {
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`d_elete_contactdb_lists_list_id`]
#[derive(Clone, Debug, Default)]
pub struct DEleteContactdbListsListIdParams {
    pub list_id: serde_json::Value,
    /// Adds the ability to delete all contacts on the list in addition to deleting the list.
    pub delete_contacts: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`d_elete_contactdb_lists_list_id_recipients_recipient_id`]
#[derive(Clone, Debug, Default)]
pub struct DEleteContactdbListsListIdRecipientsRecipientIdParams {
    /// The ID of the list you are taking this recipient away from.
    pub list_id: serde_json::Value,
    /// The ID of the recipient to take off the list.
    pub recipient_id: serde_json::Value,
    /// The ID of the list that you want to add the recipient to.
    pub list_id2: serde_json::Value,
    /// The ID of the recipient you are adding to the list.
    pub recipient_id2: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_lists`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbListsParams {
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_lists_list_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbListsListIdParams {
    pub list_id2: serde_json::Value,
    /// The ID of the list to retrieve.
    pub list_id: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_contactdb_lists_list_id_recipients`]
#[derive(Clone, Debug, Default)]
pub struct GEtContactdbListsListIdRecipientsParams {
    /// The ID of the list whose recipients you are requesting.
    pub list_id: serde_json::Value,
    /// The id of the list of recipients you want to retrieve.
    pub list_id2: serde_json::Value,
    /// Page index of first recipient to return (must be a positive integer)
    pub page: Option<serde_json::Value>,
    /// Number of recipients to return at a time (must be a positive integer between 1 and 1000)
    pub page_size: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_atch_contactdb_lists_list_id`]
#[derive(Clone, Debug, Default)]
pub struct PAtchContactdbListsListIdParams {
    /// The ID of the list you are updating.
    pub list_id: serde_json::Value,
    pub list_id2: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub update_a_list_request: Option<crate::models::UpdateAListRequest>
}

/// struct for passing parameters to the method [`p_ost_contactdb_lists`]
#[derive(Clone, Debug, Default)]
pub struct POstContactdbListsParams {
    pub on_behalf_of: Option<serde_json::Value>,
    pub create_a_list_request: Option<crate::models::CreateAListRequest>
}

/// struct for passing parameters to the method [`p_ost_contactdb_lists_list_id_recipients`]
#[derive(Clone, Debug, Default)]
pub struct POstContactdbListsListIdRecipientsParams {
    /// The id of the list of recipients you want to retrieve.
    pub list_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_ost_contactdb_lists_list_id_recipients_recipient_id`]
#[derive(Clone, Debug, Default)]
pub struct POstContactdbListsListIdRecipientsRecipientIdParams {
    /// The ID of the list that you want to add the recipient to.
    pub list_id: serde_json::Value,
    /// The ID of the recipient you are adding to the list.
    pub recipient_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}


/// struct for typed errors of method [`d_elete_contactdb_lists`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteContactdbListsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_elete_contactdb_lists_list_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteContactdbListsListIdError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_elete_contactdb_lists_list_id_recipients_recipient_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteContactdbListsListIdRecipientsRecipientIdError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_lists`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbListsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_lists_list_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbListsListIdError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_contactdb_lists_list_id_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtContactdbListsListIdRecipientsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status404(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_contactdb_lists_list_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchContactdbListsListIdError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_contactdb_lists`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstContactdbListsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_contactdb_lists_list_id_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstContactdbListsListIdRecipientsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_contactdb_lists_list_id_recipients_recipient_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstContactdbListsListIdRecipientsRecipientIdError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to delete multiple recipient lists.**
pub async fn d_elete_contactdb_lists(configuration: &configuration::Configuration, params: DEleteContactdbListsParams) -> Result<serde_json::Value, Error<DEleteContactdbListsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteContactdbListsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to delete a specific recipient list with the given ID.**
pub async fn d_elete_contactdb_lists_list_id(configuration: &configuration::Configuration, params: DEleteContactdbListsListIdParams) -> Result<serde_json::Value, Error<DEleteContactdbListsListIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list_id = params.list_id;
    let delete_contacts = params.delete_contacts;
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists/{list_id}", local_var_configuration.base_path, list_id=list_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = delete_contacts {
        local_var_req_builder = local_var_req_builder.query(&[("delete_contacts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteContactdbListsListIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to delete a single recipient from a list.**
pub async fn d_elete_contactdb_lists_list_id_recipients_recipient_id(configuration: &configuration::Configuration, params: DEleteContactdbListsListIdRecipientsRecipientIdParams) -> Result<serde_json::Value, Error<DEleteContactdbListsListIdRecipientsRecipientIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list_id = params.list_id;
    let recipient_id = params.recipient_id;
    let list_id2 = params.list_id2;
    let recipient_id2 = params.recipient_id2;
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists/{list_id}/recipients/{recipient_id}", local_var_configuration.base_path, list_id=list_id2, recipient_id=recipient_id2);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("list_id", &list_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("recipient_id", &recipient_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteContactdbListsListIdRecipientsRecipientIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all of your recipient lists. If you don't have any lists, an empty array will be returned.**
pub async fn g_et_contactdb_lists(configuration: &configuration::Configuration, params: GEtContactdbListsParams) -> Result<crate::models::ListAllListsResponse, Error<GEtContactdbListsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbListsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a single recipient list.**
pub async fn g_et_contactdb_lists_list_id(configuration: &configuration::Configuration, params: GEtContactdbListsListIdParams) -> Result<crate::models::ContactdbList, Error<GEtContactdbListsListIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list_id2 = params.list_id2;
    let list_id = params.list_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists/{list_id}", local_var_configuration.base_path, list_id=list_id2);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = list_id {
        local_var_req_builder = local_var_req_builder.query(&[("list_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbListsListIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all recipients on the list with the given ID.**
pub async fn g_et_contactdb_lists_list_id_recipients(configuration: &configuration::Configuration, params: GEtContactdbListsListIdRecipientsParams) -> Result<crate::models::GetContactdbListsListIdRecipients200Response, Error<GEtContactdbListsListIdRecipientsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list_id = params.list_id;
    let list_id2 = params.list_id2;
    let page = params.page;
    let page_size = params.page_size;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists/{list_id}/recipients", local_var_configuration.base_path, list_id=list_id2);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("list_id", &list_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtContactdbListsListIdRecipientsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to update the name of one of your recipient lists.**
pub async fn p_atch_contactdb_lists_list_id(configuration: &configuration::Configuration, params: PAtchContactdbListsListIdParams) -> Result<crate::models::PatchContactdbListsListId200Response, Error<PAtchContactdbListsListIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list_id = params.list_id;
    let list_id2 = params.list_id2;
    let on_behalf_of = params.on_behalf_of;
    let update_a_list_request = params.update_a_list_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists/{list_id}", local_var_configuration.base_path, list_id=list_id2);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("list_id", &list_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&update_a_list_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchContactdbListsListIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to create a list for your recipients.**
pub async fn p_ost_contactdb_lists(configuration: &configuration::Configuration, params: POstContactdbListsParams) -> Result<crate::models::ContactdbList, Error<POstContactdbListsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;
    let create_a_list_request = params.create_a_list_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&create_a_list_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstContactdbListsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to add multiple recipients to a list.**  Adds existing recipients to a list, passing in the recipient IDs to add. Recipient IDs should be passed exactly as they are returned from recipient endpoints.
pub async fn p_ost_contactdb_lists_list_id_recipients(configuration: &configuration::Configuration, params: POstContactdbListsListIdRecipientsParams) -> Result<serde_json::Value, Error<POstContactdbListsListIdRecipientsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list_id = params.list_id;
    let on_behalf_of = params.on_behalf_of;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists/{list_id}/recipients", local_var_configuration.base_path, list_id=list_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstContactdbListsListIdRecipientsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to add a single recipient to a list.**
pub async fn p_ost_contactdb_lists_list_id_recipients_recipient_id(configuration: &configuration::Configuration, params: POstContactdbListsListIdRecipientsRecipientIdParams) -> Result<serde_json::Value, Error<POstContactdbListsListIdRecipientsRecipientIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list_id = params.list_id;
    let recipient_id = params.recipient_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contactdb/lists/{list_id}/recipients/{recipient_id}", local_var_configuration.base_path, list_id=list_id, recipient_id=recipient_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstContactdbListsListIdRecipientsRecipientIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

