/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_templates_template_id_versions_version_id`]
#[derive(Clone, Debug, Default)]
pub struct DEleteTemplatesTemplateIdVersionsVersionIdParams {
    ///  The ID of the original template
    pub template_id: serde_json::Value,
    /// The ID of the template version
    pub version_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_templates_template_id_versions_version_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtTemplatesTemplateIdVersionsVersionIdParams {
    ///  The ID of the original template
    pub template_id: serde_json::Value,
    /// The ID of the template version
    pub version_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_atch_templates_template_id_versions_version_id`]
#[derive(Clone, Debug, Default)]
pub struct PAtchTemplatesTemplateIdVersionsVersionIdParams {
    ///  The ID of the original template
    pub template_id: serde_json::Value,
    /// The ID of the template version
    pub version_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub transactional_template_version_create: Option<crate::models::TransactionalTemplateVersionCreate>
}

/// struct for passing parameters to the method [`p_ost_templates_template_id_versions`]
#[derive(Clone, Debug, Default)]
pub struct POstTemplatesTemplateIdVersionsParams {
    pub template_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub transactional_template_version_create: Option<crate::models::TransactionalTemplateVersionCreate>
}

/// struct for passing parameters to the method [`p_ost_templates_template_id_versions_version_id_activate`]
#[derive(Clone, Debug, Default)]
pub struct POstTemplatesTemplateIdVersionsVersionIdActivateParams {
    /// The ID of the original template
    pub template_id: serde_json::Value,
    /// The ID of the template version
    pub version_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}


/// struct for typed errors of method [`d_elete_templates_template_id_versions_version_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteTemplatesTemplateIdVersionsVersionIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_templates_template_id_versions_version_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtTemplatesTemplateIdVersionsVersionIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_templates_template_id_versions_version_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchTemplatesTemplateIdVersionsVersionIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_templates_template_id_versions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstTemplatesTemplateIdVersionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_templates_template_id_versions_version_id_activate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstTemplatesTemplateIdVersionsVersionIdActivateError {
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to delete a transactional template version.**
pub async fn d_elete_templates_template_id_versions_version_id(configuration: &configuration::Configuration, params: DEleteTemplatesTemplateIdVersionsVersionIdParams) -> Result<(), Error<DEleteTemplatesTemplateIdVersionsVersionIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let template_id = params.template_id;
    let version_id = params.version_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/templates/{template_id}/versions/{version_id}", local_var_configuration.base_path, template_id=template_id, version_id=version_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DEleteTemplatesTemplateIdVersionsVersionIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a specific version of a template.**
pub async fn g_et_templates_template_id_versions_version_id(configuration: &configuration::Configuration, params: GEtTemplatesTemplateIdVersionsVersionIdParams) -> Result<serde_json::Value, Error<GEtTemplatesTemplateIdVersionsVersionIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let template_id = params.template_id;
    let version_id = params.version_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/templates/{template_id}/versions/{version_id}", local_var_configuration.base_path, template_id=template_id, version_id=version_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtTemplatesTemplateIdVersionsVersionIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to edit the content of your template version.**
pub async fn p_atch_templates_template_id_versions_version_id(configuration: &configuration::Configuration, params: PAtchTemplatesTemplateIdVersionsVersionIdParams) -> Result<serde_json::Value, Error<PAtchTemplatesTemplateIdVersionsVersionIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let template_id = params.template_id;
    let version_id = params.version_id;
    let on_behalf_of = params.on_behalf_of;
    let transactional_template_version_create = params.transactional_template_version_create;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/templates/{template_id}/versions/{version_id}", local_var_configuration.base_path, template_id=template_id, version_id=version_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&transactional_template_version_create);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchTemplatesTemplateIdVersionsVersionIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to create a new version of a template.**
pub async fn p_ost_templates_template_id_versions(configuration: &configuration::Configuration, params: POstTemplatesTemplateIdVersionsParams) -> Result<serde_json::Value, Error<POstTemplatesTemplateIdVersionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let template_id = params.template_id;
    let on_behalf_of = params.on_behalf_of;
    let transactional_template_version_create = params.transactional_template_version_create;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/templates/{template_id}/versions", local_var_configuration.base_path, template_id=template_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&transactional_template_version_create);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstTemplatesTemplateIdVersionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to activate a version of one of your templates.**
pub async fn p_ost_templates_template_id_versions_version_id_activate(configuration: &configuration::Configuration, params: POstTemplatesTemplateIdVersionsVersionIdActivateParams) -> Result<serde_json::Value, Error<POstTemplatesTemplateIdVersionsVersionIdActivateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let template_id = params.template_id;
    let version_id = params.version_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/templates/{template_id}/versions/{version_id}/activate", local_var_configuration.base_path, template_id=template_id, version_id=version_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstTemplatesTemplateIdVersionsVersionIdActivateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

