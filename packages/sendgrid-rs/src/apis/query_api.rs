/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`g_et_messages`]
#[derive(Clone, Debug, Default)]
pub struct GEtMessagesParams {
    /// Use the query syntax  to filter your email activity.
    pub query: serde_json::Value,
    pub authorization: serde_json::Value,
    /// The number of messages returned. This parameter must be greater than 0 and less than or equal to 1000
    pub limit: Option<serde_json::Value>,
    pub x_query_id: Option<serde_json::Value>,
    pub x_cursor: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_etv3_messages_msg_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtv3MessagesMsgIdParams {
    pub authorization: serde_json::Value,
    /// The ID of the message you are requesting details for.
    pub msg_id: serde_json::Value
}


/// struct for typed errors of method [`g_et_messages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtMessagesError {
    Status400(crate::models::GetMarketingSegments500Response),
    Status429(crate::models::PostMcContactsSearch500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_etv3_messages_msg_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtv3MessagesMsgIdError {
    Status400(crate::models::PostMcContactsSearch500Response),
    Status404(crate::models::PostV3Teammates400Response),
    Status429(crate::models::PostMcContactsSearch500Response),
    UnknownValue(serde_json::Value),
}


/// This is **BETA** functionality. You may not have access, and we reserve the right to change functionality without notice.  Filter all messages to search your Email Activity. All queries need to be [URL encoded](https://meyerweb.com/eric/tools/dencoder/), and have this format:  `query={query_type}=\"{query_content}\"`  encoded, this would look like this:  `query=type%3D%22query_content%22`  for example:  Filter by a specific email - `query=to_email%3D%22example%40example.com%22`  Filter by subject line - `query=subject%3d%22A%20Great%20Subject%22`  **Full list of basic query types and examples:**   | **Filter query**    | **Unencoded Example** (put this one into the try it out query - it'll automatically encode it for you) | **Encoded Example** (use this one in your code)                        | |-----------------|----------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------| | msg_id          | msg_id=“filter0307p1las1-16816-5A023E36-1.0”                                                                               | msg_id%3D%22filter0307p1las1-16816-5A023E36-1.0%22           | | from_email      | from_email=“testing@sendgrid.net”                                                                                          | from_email%3D%22testing%40sendgrid.net%22                    | | subject         | subject=\"This is a subject test\"                                                                                      | subject%22This%20is%20a%20subject%20test%22                  | | to_email        | to_email=\"example@example.com\"                                                                                       | to_email%3D%22example%40example.com%22                       | | status          |                                                                                                                            | status%22processed%22                                        | | template_id     |                                                                                                                            |                                                                    | | asm_group_id    |                                                                                                                            |                                                                    | | api_key_id      |                                                                                                                            |                                                                    | | events          | status=\"processed\"                                                                                                   | status%3D%22processed%22                                     | | originating_ip  |                                                                                                                            |                                                                    | | categories      |                                                                                                                            |                                                                    | | unique_args     |                                                                                                                            |                                                                    | | outbound_ip     |                                                                                                                            |                                                                    | | last_event_time | last_event_time=“2017-11-07T23:13:58Z”                                                                               | last_event_time%3D%E2%80%9C2017-11-07T23%3A13%3A58Z%E2%80%9D | | clicks          | clicks=\"0\"                                                                                                           | clicks%3D%220%22                                             |  For information about building compound queries, and for the full query language functionality, see the [query language reference](https://docs.google.com/a/sendgrid.com/document/d/1fWoKTFNfg5UUsB6t9KuIcSo9CetKF_T0bGfWJ_gdPCs/edit?usp=sharing).  Coming soon, example compound queries: limit + to email + date
pub async fn g_et_messages(configuration: &configuration::Configuration, params: GEtMessagesParams) -> Result<crate::models::GetMessages200Response, Error<GEtMessagesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let query = params.query;
    let authorization = params.authorization;
    let limit = params.limit;
    let x_query_id = params.x_query_id;
    let x_cursor = params.x_cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/messages", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("query", &query.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_query_id {
        local_var_req_builder = local_var_req_builder.header("X-Query-Id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_cursor {
        local_var_req_builder = local_var_req_builder.header("X-Cursor", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.header("Authorization", authorization.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtMessagesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This is BETA functionality. You may not have access, and we reserve the right to change functionality without notice.  Get all of the details about the specified message.
pub async fn g_etv3_messages_msg_id(configuration: &configuration::Configuration, params: GEtv3MessagesMsgIdParams) -> Result<crate::models::Message, Error<GEtv3MessagesMsgIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let authorization = params.authorization;
    let msg_id = params.msg_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/messages/{msg_id}", local_var_configuration.base_path, msg_id=msg_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("Authorization", authorization.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtv3MessagesMsgIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

