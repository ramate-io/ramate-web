/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_sso_certificates_cert_id`]
#[derive(Clone, Debug, Default)]
pub struct DEleteSsoCertificatesCertIdParams {
    pub cert_id: serde_json::Value
}

/// struct for passing parameters to the method [`g_et_sso_certificates_cert_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtSsoCertificatesCertIdParams {
    pub cert_id: serde_json::Value
}

/// struct for passing parameters to the method [`g_et_sso_integrations_integration_id_certificates`]
#[derive(Clone, Debug, Default)]
pub struct GEtSsoIntegrationsIntegrationIdCertificatesParams {
    /// An ID that matches a certificate to a specific IdP integration.
    pub integration_id: serde_json::Value
}

/// struct for passing parameters to the method [`p_atch_sso_certificates_cert_id`]
#[derive(Clone, Debug, Default)]
pub struct PAtchSsoCertificatesCertIdParams {
    pub cert_id: serde_json::Value,
    pub patch_sso_certificates_cert_id_request: Option<crate::models::PatchSsoCertificatesCertIdRequest>
}

/// struct for passing parameters to the method [`p_ost_sso_certificates`]
#[derive(Clone, Debug, Default)]
pub struct POstSsoCertificatesParams {
    pub post_sso_certificates_request: Option<crate::models::PostSsoCertificatesRequest>
}


/// struct for typed errors of method [`d_elete_sso_certificates_cert_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteSsoCertificatesCertIdError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_sso_certificates_cert_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSsoCertificatesCertIdError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_sso_integrations_integration_id_certificates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSsoIntegrationsIntegrationIdCertificatesError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_sso_certificates_cert_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchSsoCertificatesCertIdError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_sso_certificates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstSsoCertificatesError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to delete an SSO certificate.**  You can retrieve a certificate's ID from the response provided by the \"Get All SSO Integrations\" endpoint.
pub async fn d_elete_sso_certificates_cert_id(configuration: &configuration::Configuration, params: DEleteSsoCertificatesCertIdParams) -> Result<crate::models::SsoCertificateBody, Error<DEleteSsoCertificatesCertIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let cert_id = params.cert_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/certificates/{cert_id}", local_var_configuration.base_path, cert_id=cert_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteSsoCertificatesCertIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve an individual SSO certificate.**
pub async fn g_et_sso_certificates_cert_id(configuration: &configuration::Configuration, params: GEtSsoCertificatesCertIdParams) -> Result<crate::models::SsoCertificateBody, Error<GEtSsoCertificatesCertIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let cert_id = params.cert_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/certificates/{cert_id}", local_var_configuration.base_path, cert_id=cert_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSsoCertificatesCertIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all your IdP configurations by configuration ID.**  The `integration_id` expected by this endpoint is the `id` returned in the response by the \"Get All SSO Integrations\" endpoint.
pub async fn g_et_sso_integrations_integration_id_certificates(configuration: &configuration::Configuration, params: GEtSsoIntegrationsIntegrationIdCertificatesParams) -> Result<serde_json::Value, Error<GEtSsoIntegrationsIntegrationIdCertificatesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let integration_id = params.integration_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/integrations/{integration_id}/certificates", local_var_configuration.base_path, integration_id=integration_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSsoIntegrationsIntegrationIdCertificatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to update an existing certificate by ID.**  You can retrieve a certificate's ID from the response provided by the \"Get All SSO Integrations\" endpoint.
pub async fn p_atch_sso_certificates_cert_id(configuration: &configuration::Configuration, params: PAtchSsoCertificatesCertIdParams) -> Result<(), Error<PAtchSsoCertificatesCertIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let cert_id = params.cert_id;
    let patch_sso_certificates_cert_id_request = params.patch_sso_certificates_cert_id_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/certificates/{cert_id}", local_var_configuration.base_path, cert_id=cert_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&patch_sso_certificates_cert_id_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PAtchSsoCertificatesCertIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to create an SSO certificate.**
pub async fn p_ost_sso_certificates(configuration: &configuration::Configuration, params: POstSsoCertificatesParams) -> Result<crate::models::SsoCertificateBody, Error<POstSsoCertificatesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let post_sso_certificates_request = params.post_sso_certificates_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/certificates", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&post_sso_certificates_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstSsoCertificatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

