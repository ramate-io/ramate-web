/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_design`]
#[derive(Clone, Debug, Default)]
pub struct DEleteDesignParams {
    /// The ID of the Design you want to duplicate.
    pub id: serde_json::Value
}

/// struct for passing parameters to the method [`g_et_design`]
#[derive(Clone, Debug, Default)]
pub struct GEtDesignParams {
    /// The ID of the Design you want to duplicate.
    pub id: serde_json::Value
}

/// struct for passing parameters to the method [`g_et_sendgrid_pre_built_design`]
#[derive(Clone, Debug, Default)]
pub struct GEtSendgridPreBuiltDesignParams {
    /// The ID of the pre-built Design you want to duplicate.
    pub id: serde_json::Value
}

/// struct for passing parameters to the method [`l_ist_designs`]
#[derive(Clone, Debug, Default)]
pub struct LIstDesignsParams {
    /// number of results to return
    pub page_size: Option<serde_json::Value>,
    /// token corresponding to a specific page of results, as provided by metadata
    pub page_token: Option<serde_json::Value>,
    /// set to false to return all fields
    pub summary: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`l_ist_sendgrid_pre_built_designs`]
#[derive(Clone, Debug, Default)]
pub struct LIstSendgridPreBuiltDesignsParams {
    /// number of results to return
    pub page_size: Option<serde_json::Value>,
    /// token corresponding to a specific page of results, as provided by metadata
    pub page_token: Option<serde_json::Value>,
    /// set to false to return all fields
    pub summary: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_ost_design`]
#[derive(Clone, Debug, Default)]
pub struct POstDesignParams {
    pub body: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_ost_design_dup`]
#[derive(Clone, Debug, Default)]
pub struct POstDesignDupParams {
    /// The ID of the Design you want to duplicate.
    pub id: serde_json::Value,
    pub design_duplicate_input: Option<crate::models::DesignDuplicateInput>
}

/// struct for passing parameters to the method [`p_ost_sendgrid_pre_built_design`]
#[derive(Clone, Debug, Default)]
pub struct POstSendgridPreBuiltDesignParams {
    /// The ID of the pre-built Design you want to duplicate.
    pub id: serde_json::Value,
    pub design_duplicate_input: Option<crate::models::DesignDuplicateInput>
}

/// struct for passing parameters to the method [`p_ut_design`]
#[derive(Clone, Debug, Default)]
pub struct PUtDesignParams {
    /// The ID of the Design you want to duplicate.
    pub id: serde_json::Value,
    pub put_design_request: Option<crate::models::PutDesignRequest>
}


/// struct for typed errors of method [`d_elete_design`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteDesignError {
    Status400(crate::models::ApiErrors),
    Status404(crate::models::ApiErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_design`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtDesignError {
    Status400(crate::models::ApiErrors),
    Status404(crate::models::ApiErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_sendgrid_pre_built_design`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSendgridPreBuiltDesignError {
    Status400(crate::models::ApiErrors),
    Status404(crate::models::ApiErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`l_ist_designs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LIstDesignsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`l_ist_sendgrid_pre_built_designs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LIstSendgridPreBuiltDesignsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_design`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstDesignError {
    Status400(crate::models::ApiErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_design_dup`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstDesignDupError {
    Status400(crate::models::ApiError),
    Status404(crate::models::ApiErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_sendgrid_pre_built_design`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstSendgridPreBuiltDesignError {
    Status400(crate::models::ApiErrors),
    Status404(crate::models::ApiErrors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ut_design`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PUtDesignError {
    Status400(crate::models::ApiErrors),
    Status404(crate::models::ApiErrors),
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to delete a single design**.  Be sure to check the ID of the design you intend to delete before making this request; deleting a design is a permanent action.
pub async fn d_elete_design(configuration: &configuration::Configuration, params: DEleteDesignParams) -> Result<serde_json::Value, Error<DEleteDesignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteDesignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a single design**.  A GET request to `/designs/{id}` will retrieve details about a specific design in your Design Library.  This endpoint is valuable when retrieving information stored in a field that you wish to update using a PATCH request.
pub async fn g_et_design(configuration: &configuration::Configuration, params: GEtDesignParams) -> Result<serde_json::Value, Error<GEtDesignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtDesignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a single pre-built design**.  A GET request to `/designs/pre-builts/{id}` will retrieve details about a specific pre-built design.  This endpoint is valuable when retrieving details about a pre-built design that you wish to duplicate and modify.
pub async fn g_et_sendgrid_pre_built_design(configuration: &configuration::Configuration, params: GEtSendgridPreBuiltDesignParams) -> Result<serde_json::Value, Error<GEtSendgridPreBuiltDesignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs/pre-builts/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSendgridPreBuiltDesignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a list of designs already stored in your Design Library**.  A GET request to `/designs` will return a list of your existing designs. This endpoint will not return the pre-built Twilio SendGrid designs. Pre-built designs can be retrieved using the `/designs/pre-builts` endpoint, which is detailed below.  By default, you will receive 100 results per request; however, you can modify the number of results returned by passing an integer to the `page_size` query parameter.
pub async fn l_ist_designs(configuration: &configuration::Configuration, params: LIstDesignsParams) -> Result<crate::models::ListDesigns200Response, Error<LIstDesignsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_size = params.page_size;
    let page_token = params.page_token;
    let summary = params.summary;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_token {
        local_var_req_builder = local_var_req_builder.query(&[("page_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = summary {
        local_var_req_builder = local_var_req_builder.query(&[("summary", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<LIstDesignsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a list of pre-built designs provided by Twilio SendGrid**.  Unlike the `/designs` endpoint where *your* designs are stored, a GET request made to `designs/pre-builts` will retrieve a list of the pre-built Twilio SendGrid designs. This endpoint will not return the designs stored in your Design Library.  By default, you will receive 100 results per request; however, you can modify the number of results returned by passing an integer to the `page_size` query parameter.  This endpoint is useful for retrieving the IDs of Twilio SendGrid designs that you want to duplicate and modify.
pub async fn l_ist_sendgrid_pre_built_designs(configuration: &configuration::Configuration, params: LIstSendgridPreBuiltDesignsParams) -> Result<crate::models::ListDesigns200Response, Error<LIstSendgridPreBuiltDesignsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_size = params.page_size;
    let page_token = params.page_token;
    let summary = params.summary;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs/pre-builts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_token {
        local_var_req_builder = local_var_req_builder.query(&[("page_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = summary {
        local_var_req_builder = local_var_req_builder.query(&[("summary", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<LIstSendgridPreBuiltDesignsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to create a new design**.  You can add a new design by passing data, including a string of HTML email content, to `/designs`. When creating designs from scratch, be aware of the styling constraints inherent to many email clients. For a list of best practices, see our guide to [Cross-Platform Email Design](https://sendgrid.com/docs/ui/sending-email/cross-platform-html-design/).  The Design Library can also convert your design’s HTML elements into drag and drop modules that are editable in the Designs Library user interface. For more, visit the [Design and Code Editor documentation](https://sendgrid.com/docs/ui/sending-email/editor/#drag--drop-markup).  Because the `/designs` endpoint makes it easy to add designs, you can create a design with your preferred tooling or migrate designs you already own without relying on the Design Library UI.
pub async fn p_ost_design(configuration: &configuration::Configuration, params: POstDesignParams) -> Result<serde_json::Value, Error<POstDesignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstDesignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to duplicate one of your existing designs**.  Modifying an existing design is often the easiest way to create something new.  You are not required to pass any data in the body of a request to this endpoint. If you choose to leave the `name` field blank, your duplicate will be assigned the name of the design it was copied from with the text \"Duplicate: \" prepended to it. This name change is only a convenience, as the duplicate will be assigned a unique ID that differentiates it from your other designs.  You can modify your duplicate’s name at the time of creation by passing an updated value to the `name` field when making the initial request. More on retrieving design IDs can be found below.
pub async fn p_ost_design_dup(configuration: &configuration::Configuration, params: POstDesignDupParams) -> Result<serde_json::Value, Error<POstDesignDupError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let design_duplicate_input = params.design_duplicate_input;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&design_duplicate_input);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstDesignDupError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to duplicate one of the pre-built Twilio SendGrid designs**.  Like duplicating one of your existing designs, you are not required to pass any data in the body of a request to this endpoint. If you choose to leave the `name` field blank, your duplicate will be assigned the name of the design it was copied from with the text \"Duplicate: \" prepended to it. This name change is only a convenience, as the duplicate design will be assigned a unique ID that differentiates it from your other designs. You can retrieve the IDs for Twilio SendGrid pre-built designs using the \"List SendGrid Pre-built Designs\" endpoint.  You can modify your duplicate’s name at the time of creation by passing an updated value to the `name` field when making the initial request. More on retrieving design IDs can be found above.
pub async fn p_ost_sendgrid_pre_built_design(configuration: &configuration::Configuration, params: POstSendgridPreBuiltDesignParams) -> Result<serde_json::Value, Error<POstSendgridPreBuiltDesignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let design_duplicate_input = params.design_duplicate_input;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs/pre-builts/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&design_duplicate_input);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstSendgridPreBuiltDesignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to edit a design**.  The Design API supports PATCH requests, which allow you to make partial updates to a single design. Passing data to a specific field will update only the data stored in that field; all other fields will be unaltered.  For example, updating a design's name requires that you make a PATCH request to this endpoint with data specified for the `name` field only.  ``` {     \"name\": \"<Updated Name>\" } ```
pub async fn p_ut_design(configuration: &configuration::Configuration, params: PUtDesignParams) -> Result<serde_json::Value, Error<PUtDesignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let put_design_request = params.put_design_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/designs/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&put_design_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PUtDesignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

