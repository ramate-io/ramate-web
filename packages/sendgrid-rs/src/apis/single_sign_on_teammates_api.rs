/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`p_atch_sso_teammates_username`]
#[derive(Clone, Debug, Default)]
pub struct PAtchSsoTeammatesUsernameParams {
    /// This email address must be the same address assigned to the teammate in your IdP
    pub username: serde_json::Value,
    pub patch_sso_teammates_username_request: Option<crate::models::PatchSsoTeammatesUsernameRequest>
}

/// struct for passing parameters to the method [`p_ost_sso_teammates`]
#[derive(Clone, Debug, Default)]
pub struct POstSsoTeammatesParams {
    pub body: Option<serde_json::Value>
}


/// struct for typed errors of method [`p_atch_sso_teammates_username`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchSsoTeammatesUsernameError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_sso_teammates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstSsoTeammatesError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to modify an existing SSO Teammate.**  To turn a teammate into an admin, the request body should contain the `is_admin` field set to `true`. Otherwise, set `is_admin` to false and pass in all the scopes that a teammate should have.  Only the parent user and Teammates with admin permissions can update another Teammate’s permissions. Admin users can only update permissions.
pub async fn p_atch_sso_teammates_username(configuration: &configuration::Configuration, params: PAtchSsoTeammatesUsernameParams) -> Result<serde_json::Value, Error<PAtchSsoTeammatesUsernameError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let username = params.username;
    let patch_sso_teammates_username_request = params.patch_sso_teammates_username_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/teammates/{username}", local_var_configuration.base_path, username=username);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&patch_sso_teammates_username_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchSsoTeammatesUsernameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to create an SSO Teammate.**  The email provided for this user will also function as the Teammate’s username.
pub async fn p_ost_sso_teammates(configuration: &configuration::Configuration, params: POstSsoTeammatesParams) -> Result<serde_json::Value, Error<POstSsoTeammatesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/teammates", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstSsoTeammatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

