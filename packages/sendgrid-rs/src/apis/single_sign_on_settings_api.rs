/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_sso_integrations_id`]
#[derive(Clone, Debug, Default)]
pub struct DEleteSsoIntegrationsIdParams {
    pub id: serde_json::Value
}

/// struct for passing parameters to the method [`g_et_sso_integrations`]
#[derive(Clone, Debug, Default)]
pub struct GEtSsoIntegrationsParams {
    /// If this parameter is set to `true`, the response will include the `completed_integration` field.
    pub si: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_sso_integrations_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtSsoIntegrationsIdParams {
    pub id: serde_json::Value,
    /// If this parameter is set to `true`, the response will include the `completed_integration` field.
    pub si: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_atch_sso_integrations_id`]
#[derive(Clone, Debug, Default)]
pub struct PAtchSsoIntegrationsIdParams {
    pub id: serde_json::Value,
    /// If this parameter is set to `true`, the response will include the `completed_integration` field.
    pub si: Option<serde_json::Value>,
    pub create_integration_request: Option<crate::models::CreateIntegrationRequest>
}

/// struct for passing parameters to the method [`p_ost_sso_integrations`]
#[derive(Clone, Debug, Default)]
pub struct POstSsoIntegrationsParams {
    pub create_integration_request: Option<crate::models::CreateIntegrationRequest>
}


/// struct for typed errors of method [`d_elete_sso_integrations_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteSsoIntegrationsIdError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_sso_integrations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSsoIntegrationsError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_sso_integrations_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtSsoIntegrationsIdError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_sso_integrations_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchSsoIntegrationsIdError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_sso_integrations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstSsoIntegrationsError {
    Status400(),
    Status401(),
    Status403(),
    Status429(),
    Status500(),
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to delete an IdP configuration by ID.**  You can retrieve the IDs for your configurations from the response provided by the \"Get All SSO Integrations\" endpoint.
pub async fn d_elete_sso_integrations_id(configuration: &configuration::Configuration, params: DEleteSsoIntegrationsIdParams) -> Result<(), Error<DEleteSsoIntegrationsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/integrations/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DEleteSsoIntegrationsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all SSO integrations tied to your Twilio SendGrid account.**  The IDs returned by this endpoint can be used by the APIs additional endpoints to modify your SSO integrations.
pub async fn g_et_sso_integrations(configuration: &configuration::Configuration, params: GEtSsoIntegrationsParams) -> Result<serde_json::Value, Error<GEtSsoIntegrationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let si = params.si;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/integrations", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = si {
        local_var_req_builder = local_var_req_builder.query(&[("si", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSsoIntegrationsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve an SSO integration by ID.**  You can retrieve the IDs for your configurations from the response provided by the \"Get All SSO Integrations\" endpoint.
pub async fn g_et_sso_integrations_id(configuration: &configuration::Configuration, params: GEtSsoIntegrationsIdParams) -> Result<serde_json::Value, Error<GEtSsoIntegrationsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let si = params.si;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/integrations/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = si {
        local_var_req_builder = local_var_req_builder.query(&[("si", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtSsoIntegrationsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to modify an exisiting SSO integration.**  You can retrieve the IDs for your configurations from the response provided by the \"Get All SSO Integrations\" endpoint.
pub async fn p_atch_sso_integrations_id(configuration: &configuration::Configuration, params: PAtchSsoIntegrationsIdParams) -> Result<serde_json::Value, Error<PAtchSsoIntegrationsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let si = params.si;
    let create_integration_request = params.create_integration_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/integrations/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = si {
        local_var_req_builder = local_var_req_builder.query(&[("si", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_integration_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchSsoIntegrationsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to create an SSO integration.**
pub async fn p_ost_sso_integrations(configuration: &configuration::Configuration, params: POstSsoIntegrationsParams) -> Result<serde_json::Value, Error<POstSsoIntegrationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_integration_request = params.create_integration_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/sso/integrations", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_integration_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstSsoIntegrationsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

