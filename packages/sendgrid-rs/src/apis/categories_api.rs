/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`g_et_categories`]
#[derive(Clone, Debug, Default)]
pub struct GEtCategoriesParams {
    /// The number of categories to display per page.
    pub limit: Option<serde_json::Value>,
    /// Allows you to perform a prefix search on this particular category.
    pub category: Option<serde_json::Value>,
    /// The point in the list that you would like to begin displaying results.
    pub offset: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_categories_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtCategoriesStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD
    pub start_date: serde_json::Value,
    /// The individual categories that you want to retrieve statistics for. You may include up to 10 different categories.
    pub categories: serde_json::Value,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>,
    /// The number of results to include.
    pub limit: Option<serde_json::Value>,
    /// The number of results to skip.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_categories_stats_sums`]
#[derive(Clone, Debug, Default)]
pub struct GEtCategoriesStatsSumsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    /// The metric that you want to sort by.  Must be a single metric.
    pub sort_by_metric: Option<serde_json::Value>,
    /// The direction you want to sort.
    pub sort_by_direction: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>,
    /// Limits the number of results returned.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}


/// struct for typed errors of method [`g_et_categories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtCategoriesError {
    Status400(crate::models::GetCategories400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_categories_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtCategoriesStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_categories_stats_sums`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtCategoriesStatsSumsError {
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to retrieve a list of all of your categories.**
pub async fn g_et_categories(configuration: &configuration::Configuration, params: GEtCategoriesParams) -> Result<serde_json::Value, Error<GEtCategoriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let limit = params.limit;
    let category = params.category;
    let offset = params.offset;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/categories", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = category {
        local_var_req_builder = local_var_req_builder.query(&[("category", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtCategoriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all of your email statistics for each of your categories.**  If you do not define any query parameters, this endpoint will return a sum for each category in groups of 10.
pub async fn g_et_categories_stats(configuration: &configuration::Configuration, params: GEtCategoriesStatsParams) -> Result<serde_json::Value, Error<GEtCategoriesStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let categories = params.categories;
    let end_date = params.end_date;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/categories/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("categories", &categories.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtCategoriesStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve the total sum of each email statistic for every category over the given date range.**  If you do not define any query parameters, this endpoint will return a sum for each category in groups of 10.
pub async fn g_et_categories_stats_sums(configuration: &configuration::Configuration, params: GEtCategoriesStatsSumsParams) -> Result<crate::models::CategoryStats, Error<GEtCategoriesStatsSumsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let sort_by_metric = params.sort_by_metric;
    let sort_by_direction = params.sort_by_direction;
    let end_date = params.end_date;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/categories/stats/sums", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sort_by_metric {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_metric", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by_direction {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by_direction", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtCategoriesStatsSumsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

