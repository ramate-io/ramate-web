/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_campaigns_campaign_id`]
#[derive(Clone, Debug, Default)]
pub struct DEleteCampaignsCampaignIdParams {
    /// The id of the campaign you would like to retrieve.
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`d_elete_campaigns_campaign_id_schedules`]
#[derive(Clone, Debug, Default)]
pub struct DEleteCampaignsCampaignIdSchedulesParams {
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_campaigns`]
#[derive(Clone, Debug, Default)]
pub struct GEtCampaignsParams {
    /// The number of results you would like to receive at a time.
    pub limit: Option<serde_json::Value>,
    /// The index of the first campaign to return, where 0 is the first campaign.
    pub offset: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_campaigns_campaign_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtCampaignsCampaignIdParams {
    /// The id of the campaign you would like to retrieve.
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_campaigns_campaign_id_schedules`]
#[derive(Clone, Debug, Default)]
pub struct GEtCampaignsCampaignIdSchedulesParams {
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_atch_campaigns_campaign_id`]
#[derive(Clone, Debug, Default)]
pub struct PAtchCampaignsCampaignIdParams {
    /// The id of the campaign you would like to retrieve.
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub update_a_campaign_request: Option<crate::models::UpdateACampaignRequest>
}

/// struct for passing parameters to the method [`p_atch_campaigns_campaign_id_schedules`]
#[derive(Clone, Debug, Default)]
pub struct PAtchCampaignsCampaignIdSchedulesParams {
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub update_a_scheduled_campaign_request: Option<crate::models::UpdateAScheduledCampaignRequest>
}

/// struct for passing parameters to the method [`p_ost_campaigns`]
#[derive(Clone, Debug, Default)]
pub struct POstCampaignsParams {
    pub on_behalf_of: Option<serde_json::Value>,
    pub campaign_request: Option<crate::models::CampaignRequest>
}

/// struct for passing parameters to the method [`p_ost_campaigns_campaign_id_schedules`]
#[derive(Clone, Debug, Default)]
pub struct POstCampaignsCampaignIdSchedulesParams {
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub schedule_a_campaign_request: Option<crate::models::ScheduleACampaignRequest>
}

/// struct for passing parameters to the method [`p_ost_campaigns_campaign_id_schedules_now`]
#[derive(Clone, Debug, Default)]
pub struct POstCampaignsCampaignIdSchedulesNowParams {
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`p_ost_campaigns_campaign_id_schedules_test`]
#[derive(Clone, Debug, Default)]
pub struct POstCampaignsCampaignIdSchedulesTestParams {
    pub campaign_id: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    pub post_campaigns_campaign_id_schedules_test_request: Option<crate::models::PostCampaignsCampaignIdSchedulesTestRequest>
}


/// struct for typed errors of method [`d_elete_campaigns_campaign_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteCampaignsCampaignIdError {
    Status401(serde_json::Value),
    Status404(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_elete_campaigns_campaign_id_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteCampaignsCampaignIdSchedulesError {
    Status403(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_campaigns`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtCampaignsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_campaigns_campaign_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtCampaignsCampaignIdError {
    Status401(serde_json::Value),
    Status404(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_campaigns_campaign_id_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtCampaignsCampaignIdSchedulesError {
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_campaigns_campaign_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchCampaignsCampaignIdError {
    Status400(serde_json::Value),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status403(serde_json::Value),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_campaigns_campaign_id_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchCampaignsCampaignIdSchedulesError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status403(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_campaigns`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstCampaignsError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_campaigns_campaign_id_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstCampaignsCampaignIdSchedulesError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status403(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_campaigns_campaign_id_schedules_now`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstCampaignsCampaignIdSchedulesNowError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status401(crate::models::GlobalErrorResponseSchema),
    Status403(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_campaigns_campaign_id_schedules_test`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstCampaignsCampaignIdSchedulesTestError {
    Status400(crate::models::GlobalErrorResponseSchema),
    Status404(crate::models::GlobalErrorResponseSchema),
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to delete a specific campaign.**
pub async fn d_elete_campaigns_campaign_id(configuration: &configuration::Configuration, params: DEleteCampaignsCampaignIdParams) -> Result<serde_json::Value, Error<DEleteCampaignsCampaignIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteCampaignsCampaignIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to unschedule a campaign that has already been scheduled to be sent.**  A successful unschedule will return a 204. If the specified campaign is in the process of being sent, the only option is to cancel (a different method).
pub async fn d_elete_campaigns_campaign_id_schedules(configuration: &configuration::Configuration, params: DEleteCampaignsCampaignIdSchedulesParams) -> Result<serde_json::Value, Error<DEleteCampaignsCampaignIdSchedulesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}/schedules", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEleteCampaignsCampaignIdSchedulesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a list of all of your campaigns.**  Returns campaigns in reverse order they were created (newest first).  Returns an empty array if no campaigns exist.
pub async fn g_et_campaigns(configuration: &configuration::Configuration, params: GEtCampaignsParams) -> Result<crate::models::GetCampaigns200Response, Error<GEtCampaignsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let limit = params.limit;
    let offset = params.offset;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtCampaignsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve a specific campaign.**
pub async fn g_et_campaigns_campaign_id(configuration: &configuration::Configuration, params: GEtCampaignsCampaignIdParams) -> Result<crate::models::GetCampaignsCampaignId200Response, Error<GEtCampaignsCampaignIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtCampaignsCampaignIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve the date and time that a campaign has been scheduled to be sent.**
pub async fn g_et_campaigns_campaign_id_schedules(configuration: &configuration::Configuration, params: GEtCampaignsCampaignIdSchedulesParams) -> Result<crate::models::ViewScheduledTimeOfACampaignResponse, Error<GEtCampaignsCampaignIdSchedulesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}/schedules", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtCampaignsCampaignIdSchedulesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to update a specific campaign.**  This is especially useful if you only set up the campaign using POST /campaigns, but didn't set many of the parameters.
pub async fn p_atch_campaigns_campaign_id(configuration: &configuration::Configuration, params: PAtchCampaignsCampaignIdParams) -> Result<serde_json::Value, Error<PAtchCampaignsCampaignIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;
    let update_a_campaign_request = params.update_a_campaign_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&update_a_campaign_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchCampaignsCampaignIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows to you change the scheduled time and date for a campaign to be sent.**
pub async fn p_atch_campaigns_campaign_id_schedules(configuration: &configuration::Configuration, params: PAtchCampaignsCampaignIdSchedulesParams) -> Result<crate::models::UpdateAScheduledCampaignResponse, Error<PAtchCampaignsCampaignIdSchedulesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;
    let update_a_scheduled_campaign_request = params.update_a_scheduled_campaign_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}/schedules", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&update_a_scheduled_campaign_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchCampaignsCampaignIdSchedulesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to create a campaign.**  In order to send or schedule the campaign, you will be required to provide a subject, sender ID, content (we suggest both html and plain text), and at least one list or segment ID. This information is not required when you create a campaign.
pub async fn p_ost_campaigns(configuration: &configuration::Configuration, params: POstCampaignsParams) -> Result<serde_json::Value, Error<POstCampaignsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let on_behalf_of = params.on_behalf_of;
    let campaign_request = params.campaign_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&campaign_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstCampaignsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to schedule a specific date and time for your campaign to be sent.**  If you have the flexibility, it's better to schedule mail for off-peak times. Most emails are scheduled and sent at the top of the hour or half hour. Scheduling email to avoid those times (for example, scheduling at 10:53) can result in lower deferral rates because it won't be going through our servers at the same times as everyone else's mail.
pub async fn p_ost_campaigns_campaign_id_schedules(configuration: &configuration::Configuration, params: POstCampaignsCampaignIdSchedulesParams) -> Result<crate::models::ScheduleACampaignResponse, Error<POstCampaignsCampaignIdSchedulesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;
    let schedule_a_campaign_request = params.schedule_a_campaign_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}/schedules", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&schedule_a_campaign_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstCampaignsCampaignIdSchedulesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to immediately send an existing campaign.**  Normally a POST request would have a body, but since this endpoint is telling us to send a resource that is already created, a request body is not needed.
pub async fn p_ost_campaigns_campaign_id_schedules_now(configuration: &configuration::Configuration, params: POstCampaignsCampaignIdSchedulesNowParams) -> Result<crate::models::SendACampaignResponse, Error<POstCampaignsCampaignIdSchedulesNowError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}/schedules/now", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstCampaignsCampaignIdSchedulesNowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to send a test campaign.**  To send to multiple addresses, use an array for the JSON \"to\" value [\"one@address\",\"two@address\"]
pub async fn p_ost_campaigns_campaign_id_schedules_test(configuration: &configuration::Configuration, params: POstCampaignsCampaignIdSchedulesTestParams) -> Result<crate::models::SendATestCampaignRequest, Error<POstCampaignsCampaignIdSchedulesTestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let campaign_id = params.campaign_id;
    let on_behalf_of = params.on_behalf_of;
    let post_campaigns_campaign_id_schedules_test_request = params.post_campaigns_campaign_id_schedules_test_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/campaigns/{campaign_id}/schedules/test", local_var_configuration.base_path, campaign_id=campaign_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&post_campaigns_campaign_id_schedules_test_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstCampaignsCampaignIdSchedulesTestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

