/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`g_et_browsers_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtBrowsersStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    /// The browsers to get statistics for. You can include up to 10 different browsers by including this parameter multiple times.
    pub browsers: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>,
    /// The number of results to return.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_clients_client_type_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtClientsClientTypeStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    /// Specifies the type of client to retrieve stats for. Must be either \"phone\", \"tablet\", \"webmail\", or \"desktop\".
    pub client_type: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_clients_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtClientsStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_devices_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtDevicesStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    /// The number of results to return.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_geo_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtGeoStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    /// The country you would like to see statistics for. Currently only supported for US and CA.
    pub country: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>,
    /// The number of results to return.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_mailbox_providers_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtMailboxProvidersStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    /// The mail box providers to get statistics for. You can include up to 10 by including this parameter multiple times.
    pub mailbox_providers: Option<serde_json::Value>,
    pub on_behalf_of: Option<serde_json::Value>,
    /// The number of results to return.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>
}

/// struct for passing parameters to the method [`g_et_stats`]
#[derive(Clone, Debug, Default)]
pub struct GEtStatsParams {
    /// The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
    pub start_date: serde_json::Value,
    pub on_behalf_of: Option<serde_json::Value>,
    /// The number of results to return.
    pub limit: Option<serde_json::Value>,
    /// The point in the list to begin retrieving results.
    pub offset: Option<serde_json::Value>,
    /// How to group the statistics. Must be either \"day\", \"week\", or \"month\".
    pub aggregated_by: Option<serde_json::Value>,
    /// The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.
    pub end_date: Option<serde_json::Value>
}


/// struct for typed errors of method [`g_et_browsers_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtBrowsersStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_clients_client_type_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtClientsClientTypeStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_clients_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtClientsStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_devices_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtDevicesStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_geo_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtGeoStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_mailbox_providers_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtMailboxProvidersStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtStatsError {
    UnknownValue(serde_json::Value),
}


/// **This endpoint allows you to retrieve your email statistics segmented by browser type.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).
pub async fn g_et_browsers_stats(configuration: &configuration::Configuration, params: GEtBrowsersStatsParams) -> Result<serde_json::Value, Error<GEtBrowsersStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let browsers = params.browsers;
    let on_behalf_of = params.on_behalf_of;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let end_date = params.end_date;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/browsers/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = browsers {
        local_var_req_builder = local_var_req_builder.query(&[("browsers", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtBrowsersStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve your email statistics segmented by a specific client type.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  ## Available Client Types - phone - tablet - webmail - desktop  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).
pub async fn g_et_clients_client_type_stats(configuration: &configuration::Configuration, params: GEtClientsClientTypeStatsParams) -> Result<serde_json::Value, Error<GEtClientsClientTypeStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let client_type = params.client_type;
    let on_behalf_of = params.on_behalf_of;
    let end_date = params.end_date;
    let aggregated_by = params.aggregated_by;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/clients/{client_type}/stats", local_var_configuration.base_path, client_type=client_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtClientsClientTypeStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve your email statistics segmented by client type.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).
pub async fn g_et_clients_stats(configuration: &configuration::Configuration, params: GEtClientsStatsParams) -> Result<serde_json::Value, Error<GEtClientsStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let on_behalf_of = params.on_behalf_of;
    let end_date = params.end_date;
    let aggregated_by = params.aggregated_by;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/clients/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtClientsStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve your email statistics segmented by the device type.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  ## Available Device Types | **Device** | **Description** | **Example** | |---|---|---| | Desktop | Email software on desktop computer. | I.E., Outlook, Sparrow, or Apple Mail. | | Webmail | A web-based email client. | I.E., Yahoo, Google, AOL, or Outlook.com. | | Phone | A smart phone. | iPhone, Android, Blackberry, etc. | Tablet | A tablet computer. | iPad, android based tablet, etc. | | Other | An unrecognized device. |  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).
pub async fn g_et_devices_stats(configuration: &configuration::Configuration, params: GEtDevicesStatsParams) -> Result<serde_json::Value, Error<GEtDevicesStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let on_behalf_of = params.on_behalf_of;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let end_date = params.end_date;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/devices/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtDevicesStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve your email statistics segmented by country and state/province.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Statistics/index.html).
pub async fn g_et_geo_stats(configuration: &configuration::Configuration, params: GEtGeoStatsParams) -> Result<serde_json::Value, Error<GEtGeoStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let country = params.country;
    let on_behalf_of = params.on_behalf_of;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let end_date = params.end_date;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/geo/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = country {
        local_var_req_builder = local_var_req_builder.query(&[("country", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtGeoStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve your email statistics segmented by recipient mailbox provider.**  **We only store up to 7 days of email activity in our database.** By default, 500 items will be returned per request via the Advanced Stats API endpoints.  Advanced Stats provide a more in-depth view of your email statistics and the actions taken by your recipients. You can segment these statistics by geographic location, device type, client type, browser, and mailbox provider. For more information about statistics, please see our [Statistics Overview](https://sendgrid.com/docs/ui/analytics-and-reporting/stats-overview/).
pub async fn g_et_mailbox_providers_stats(configuration: &configuration::Configuration, params: GEtMailboxProvidersStatsParams) -> Result<serde_json::Value, Error<GEtMailboxProvidersStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let mailbox_providers = params.mailbox_providers;
    let on_behalf_of = params.on_behalf_of;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let end_date = params.end_date;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mailbox_providers/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = mailbox_providers {
        local_var_req_builder = local_var_req_builder.query(&[("mailbox_providers", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtMailboxProvidersStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// **This endpoint allows you to retrieve all of your global email statistics between a given date range.**  Parent accounts will see aggregated stats for their account and all subuser accounts. Subuser accounts will only see their own stats.
pub async fn g_et_stats(configuration: &configuration::Configuration, params: GEtStatsParams) -> Result<serde_json::Value, Error<GEtStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let start_date = params.start_date;
    let on_behalf_of = params.on_behalf_of;
    let limit = params.limit;
    let offset = params.offset;
    let aggregated_by = params.aggregated_by;
    let end_date = params.end_date;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aggregated_by {
        local_var_req_builder = local_var_req_builder.query(&[("aggregated_by", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start_date", &start_date.to_string())]);
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = on_behalf_of {
        local_var_req_builder = local_var_req_builder.header("on-behalf-of", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

