/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AbtestSummary {
    /// What differs between the A/B tests
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<RHashType>,
    /// How the winner will be decided
    #[serde(rename = "winner_criteria", deserialize_with = "Option::deserialize")]
    pub winner_criteria: Option<WinnerCriteria>,
    /// What percentage of your recipient will be included in your A/B testing
    #[serde(rename = "test_percentage", deserialize_with = "Option::deserialize")]
    pub test_percentage: Option<serde_json::Value>,
    /// How long the A/B Testing will last
    #[serde(rename = "duration", deserialize_with = "Option::deserialize")]
    pub duration: Option<serde_json::Value>,
    /// Winner of the A/B Test
    #[serde(rename = "winning_template_id", deserialize_with = "Option::deserialize")]
    pub winning_template_id: Option<serde_json::Value>,
    /// When the winner was selected
    #[serde(rename = "winner_selected_at", deserialize_with = "Option::deserialize")]
    pub winner_selected_at: Option<serde_json::Value>,
    /// Last day to select an A/B Test Winner
    #[serde(rename = "expiration_date", deserialize_with = "Option::deserialize")]
    pub expiration_date: Option<serde_json::Value>,
}

impl AbtestSummary {
    pub fn new(r#type: Option<RHashType>, winner_criteria: Option<WinnerCriteria>, test_percentage: Option<serde_json::Value>, duration: Option<serde_json::Value>, winning_template_id: Option<serde_json::Value>, winner_selected_at: Option<serde_json::Value>, expiration_date: Option<serde_json::Value>) -> AbtestSummary {
        AbtestSummary {
            r#type,
            winner_criteria,
            test_percentage,
            duration,
            winning_template_id,
            winner_selected_at,
            expiration_date,
        }
    }
}

/// What differs between the A/B tests
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "subject")]
    Subject,
    #[serde(rename = "content")]
    Content,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Subject
    }
}
/// How the winner will be decided
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WinnerCriteria {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "click")]
    Click,
    #[serde(rename = "manual")]
    Manual,
}

impl Default for WinnerCriteria {
    fn default() -> WinnerCriteria {
        Self::Open
    }
}

