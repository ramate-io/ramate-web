/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetCampaignsCampaignId200Response {
    #[serde(rename = "categories", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Option<serde_json::Value>>,
    #[serde(rename = "custom_unsubscribe_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_unsubscribe_url: Option<Option<serde_json::Value>>,
    #[serde(rename = "html_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub html_content: Option<Option<serde_json::Value>>,
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<serde_json::Value>>,
    #[serde(rename = "ip_pool", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ip_pool: Option<Option<serde_json::Value>>,
    #[serde(rename = "list_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub list_ids: Option<Option<serde_json::Value>>,
    #[serde(rename = "plain_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plain_content: Option<Option<serde_json::Value>>,
    #[serde(rename = "segment_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub segment_ids: Option<Option<serde_json::Value>>,
    #[serde(rename = "sender_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sender_id: Option<Option<serde_json::Value>>,
    #[serde(rename = "status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status: Option<Option<serde_json::Value>>,
    #[serde(rename = "subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Option<serde_json::Value>>,
    #[serde(rename = "suppression_group_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suppression_group_id: Option<Option<serde_json::Value>>,
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<serde_json::Value>>,
}

impl GetCampaignsCampaignId200Response {
    pub fn new() -> GetCampaignsCampaignId200Response {
        GetCampaignsCampaignId200Response {
            categories: None,
            custom_unsubscribe_url: None,
            html_content: None,
            id: None,
            ip_pool: None,
            list_ids: None,
            plain_content: None,
            segment_ids: None,
            sender_id: None,
            status: None,
            subject: None,
            suppression_group_id: None,
            title: None,
        }
    }
}


