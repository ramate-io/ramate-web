/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MakoEvent {
    /// Name of event
    #[serde(rename = "event_name", deserialize_with = "Option::deserialize")]
    pub event_name: Option<EventName>,
    /// Date of when event occurred
    #[serde(rename = "processed", deserialize_with = "Option::deserialize")]
    pub processed: Option<serde_json::Value>,
    /// Explanation of what caused \"bounced\", \"deferred\", or \"blocked\". Usually contains error message from the server - e.g. message from gmail why mail was deferred
    #[serde(rename = "reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Option<serde_json::Value>>,
    /// Used with \"deferred\" events to indicate the attempt number out of 10. One \"deferred\" entry will exists under events array for each time a message was deferred with error message from the server. 
    #[serde(rename = "attempt_num", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attempt_num: Option<Option<serde_json::Value>>,
    /// Used with \"clicked\" event to indicate which url the user clicked.
    #[serde(rename = "url", deserialize_with = "Option::deserialize")]
    pub url: Option<serde_json::Value>,
    /// Use to distinguish between types of bounces
    #[serde(rename = "bounce_type", deserialize_with = "Option::deserialize")]
    pub bounce_type: Option<BounceType>,
    /// Client recipient used to click or open message
    #[serde(rename = "http_user_agent", deserialize_with = "Option::deserialize")]
    pub http_user_agent: Option<serde_json::Value>,
    /// For example mx.gmail.com
    #[serde(rename = "mx_server", deserialize_with = "Option::deserialize")]
    pub mx_server: Option<serde_json::Value>,
}

impl MakoEvent {
    pub fn new(event_name: Option<EventName>, processed: Option<serde_json::Value>, url: Option<serde_json::Value>, bounce_type: Option<BounceType>, http_user_agent: Option<serde_json::Value>, mx_server: Option<serde_json::Value>) -> MakoEvent {
        MakoEvent {
            event_name,
            processed,
            reason: None,
            attempt_num: None,
            url,
            bounce_type,
            http_user_agent,
            mx_server,
        }
    }
}

/// Name of event
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventName {
    #[serde(rename = "bounced")]
    Bounced,
    #[serde(rename = "opened")]
    Opened,
    #[serde(rename = "clicked")]
    Clicked,
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "dropped")]
    Dropped,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "deferred")]
    Deferred,
    #[serde(rename = "spam_report")]
    SpamReport,
    #[serde(rename = "unsubscribe")]
    Unsubscribe,
    #[serde(rename = "group_unsubscribe")]
    GroupUnsubscribe,
    #[serde(rename = "group_resubscribe")]
    GroupResubscribe,
}

impl Default for EventName {
    fn default() -> EventName {
        Self::Bounced
    }
}
/// Use to distinguish between types of bounces
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BounceType {
    #[serde(rename = "bounced")]
    Bounced,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "expired")]
    Expired,
}

impl Default for BounceType {
    fn default() -> BounceType {
        Self::Bounced
    }
}

