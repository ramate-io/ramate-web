/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SinglesendResponseShort {
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// name of the Single Send
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<serde_json::Value>,
    #[serde(rename = "abtest")]
    pub abtest: Box<crate::models::AbtestSummary>,
    /// current status of the Single Send
    #[serde(rename = "status", deserialize_with = "Option::deserialize")]
    pub status: Option<Status>,
    /// categories to associate with this Single Send
    #[serde(rename = "categories", deserialize_with = "Option::deserialize")]
    pub categories: Option<serde_json::Value>,
    /// the ISO 8601 time at which to send the Single Send; must be in future
    #[serde(rename = "send_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub send_at: Option<Option<serde_json::Value>>,
    /// true if the Single Send's AB Test functionality has been toggled on
    #[serde(rename = "is_abtest", deserialize_with = "Option::deserialize")]
    pub is_abtest: Option<serde_json::Value>,
    /// the ISO 8601 time at which the Single Send was last updated
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<serde_json::Value>,
    /// the ISO 8601 time at which the Single Send was created
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
}

impl SinglesendResponseShort {
    pub fn new(id: Option<serde_json::Value>, name: Option<serde_json::Value>, abtest: crate::models::AbtestSummary, status: Option<Status>, categories: Option<serde_json::Value>, is_abtest: Option<serde_json::Value>, updated_at: Option<serde_json::Value>, created_at: Option<serde_json::Value>) -> SinglesendResponseShort {
        SinglesendResponseShort {
            id,
            name,
            abtest: Box::new(abtest),
            status,
            categories,
            send_at: None,
            is_abtest,
            updated_at,
            created_at,
        }
    }
}

/// current status of the Single Send
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "triggered")]
    Triggered,
}

impl Default for Status {
    fn default() -> Status {
        Self::Draft
    }
}

