/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TransactionalTemplatesVersionOutputLean {
    /// ID of the transactional template version.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<serde_json::Value>>,
    /// ID of the transactional template.
    #[serde(rename = "template_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<Option<serde_json::Value>>,
    /// Set the version as the active version associated with the template. Only one version of a template can be active. The first version created for a template will automatically be set to Active.
    #[serde(rename = "active", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active: Option<Option<Active>>,
    /// Name of the transactional template version.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<serde_json::Value>>,
    /// Subject of the new transactional template version.
    #[serde(rename = "subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Option<serde_json::Value>>,
    /// The date and time that this transactional template version was updated.
    #[serde(rename = "updated_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<Option<serde_json::Value>>,
    /// If true, plain_content is always generated from html_content. If false, plain_content is not altered.
    #[serde(rename = "generate_plain_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub generate_plain_content: Option<Option<serde_json::Value>>,
    /// The editor used in the UI.
    #[serde(rename = "editor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub editor: Option<Option<Editor>>,
    /// A Thumbnail preview of the template's html content.
    #[serde(rename = "thumbnail_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub thumbnail_url: Option<Option<serde_json::Value>>,
}

impl TransactionalTemplatesVersionOutputLean {
    pub fn new() -> TransactionalTemplatesVersionOutputLean {
        TransactionalTemplatesVersionOutputLean {
            id: None,
            template_id: None,
            active: None,
            name: None,
            subject: None,
            updated_at: None,
            generate_plain_content: None,
            editor: None,
            thumbnail_url: None,
        }
    }
}

/// Set the version as the active version associated with the template. Only one version of a template can be active. The first version created for a template will automatically be set to Active.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Active {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for Active {
    fn default() -> Active {
        Self::Variant0
    }
}
/// The editor used in the UI.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Editor {
    #[serde(rename = "code")]
    Code,
    #[serde(rename = "design")]
    Design,
}

impl Default for Editor {
    fn default() -> Editor {
        Self::Code
    }
}

