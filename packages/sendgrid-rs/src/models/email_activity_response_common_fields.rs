/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EmailActivityResponseCommonFields {
    /// The 'From' email address used to deliver the message. This address should be a verified sender in your Twilio SendGrid account.
    #[serde(rename = "from_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub from_email: Option<Option<serde_json::Value>>,
    /// A unique ID assigned to the message. This ID can be used to retrieve activity data for the specific message.
    #[serde(rename = "msg_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub msg_id: Option<Option<serde_json::Value>>,
    /// The email's subject line.
    #[serde(rename = "subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Option<serde_json::Value>>,
    /// The intended recipient's email address.
    #[serde(rename = "to_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to_email: Option<Option<serde_json::Value>>,
    /// The message's status.
    #[serde(rename = "status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status: Option<Option<Status>>,
}

impl EmailActivityResponseCommonFields {
    pub fn new() -> EmailActivityResponseCommonFields {
        EmailActivityResponseCommonFields {
            from_email: None,
            msg_id: None,
            subject: None,
            to_email: None,
            status: None,
        }
    }
}

/// The message's status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "not_delivered")]
    NotDelivered,
}

impl Default for Status {
    fn default() -> Status {
        Self::Processed
    }
}

