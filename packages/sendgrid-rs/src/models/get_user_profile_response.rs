/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetUserProfileResponse {
    /// The user's address.
    #[serde(rename = "address", deserialize_with = "Option::deserialize")]
    pub address: Option<serde_json::Value>,
    /// The second line of the user's address.
    #[serde(rename = "address2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address2: Option<Option<serde_json::Value>>,
    /// The user's city.
    #[serde(rename = "city", deserialize_with = "Option::deserialize")]
    pub city: Option<serde_json::Value>,
    /// The name of the user's company.
    #[serde(rename = "company", deserialize_with = "Option::deserialize")]
    pub company: Option<serde_json::Value>,
    /// The user's country.
    #[serde(rename = "country", deserialize_with = "Option::deserialize")]
    pub country: Option<serde_json::Value>,
    /// The user's first name.
    #[serde(rename = "first_name", deserialize_with = "Option::deserialize")]
    pub first_name: Option<serde_json::Value>,
    /// The user's last name.
    #[serde(rename = "last_name", deserialize_with = "Option::deserialize")]
    pub last_name: Option<serde_json::Value>,
    /// The user's phone number.
    #[serde(rename = "phone", deserialize_with = "Option::deserialize")]
    pub phone: Option<serde_json::Value>,
    /// The user's state.
    #[serde(rename = "state", deserialize_with = "Option::deserialize")]
    pub state: Option<serde_json::Value>,
    /// The user's website URL.
    #[serde(rename = "website", deserialize_with = "Option::deserialize")]
    pub website: Option<serde_json::Value>,
    /// The user's zip code.
    #[serde(rename = "zip", deserialize_with = "Option::deserialize")]
    pub zip: Option<serde_json::Value>,
}

impl GetUserProfileResponse {
    pub fn new(address: Option<serde_json::Value>, city: Option<serde_json::Value>, company: Option<serde_json::Value>, country: Option<serde_json::Value>, first_name: Option<serde_json::Value>, last_name: Option<serde_json::Value>, phone: Option<serde_json::Value>, state: Option<serde_json::Value>, website: Option<serde_json::Value>, zip: Option<serde_json::Value>) -> GetUserProfileResponse {
        GetUserProfileResponse {
            address,
            address2: None,
            city,
            company,
            country,
            first_name,
            last_name,
            phone,
            state,
            website,
            zip,
        }
    }
}


