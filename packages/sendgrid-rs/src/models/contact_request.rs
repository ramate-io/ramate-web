/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContactRequest {
    /// The first line of the address.
    #[serde(rename = "address_line_1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_line_1: Option<Option<serde_json::Value>>,
    /// An optional second line for the address.
    #[serde(rename = "address_line_2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_line_2: Option<Option<serde_json::Value>>,
    /// Additional emails associated with the contact.
    #[serde(rename = "alternate_emails", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub alternate_emails: Option<Option<serde_json::Value>>,
    /// The contact's city.
    #[serde(rename = "city", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub city: Option<Option<serde_json::Value>>,
    /// The contact's country. Can be a full name or an abbreviation.
    #[serde(rename = "country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country: Option<Option<serde_json::Value>>,
    /// The contact's primary email. This is required to be a valid email.
    #[serde(rename = "email", deserialize_with = "Option::deserialize")]
    pub email: Option<serde_json::Value>,
    /// The contact's personal name.
    #[serde(rename = "first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<serde_json::Value>>,
    /// The contact's family name.
    #[serde(rename = "last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<serde_json::Value>>,
    /// The contact's ZIP code or other postal code.
    #[serde(rename = "postal_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<Option<serde_json::Value>>,
    /// The contact's state, province, or region.
    #[serde(rename = "state_province_region", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state_province_region: Option<Option<serde_json::Value>>,
    #[serde(rename = "custom_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Option<serde_json::Value>>,
}

impl ContactRequest {
    pub fn new(email: Option<serde_json::Value>) -> ContactRequest {
        ContactRequest {
            address_line_1: None,
            address_line_2: None,
            alternate_emails: None,
            city: None,
            country: None,
            email,
            first_name: None,
            last_name: None,
            postal_code: None,
            state_province_region: None,
            custom_fields: None,
        }
    }
}


