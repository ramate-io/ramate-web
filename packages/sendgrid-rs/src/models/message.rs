/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Message {
    #[serde(rename = "from_email", deserialize_with = "Option::deserialize")]
    pub from_email: Option<serde_json::Value>,
    #[serde(rename = "msg_id", deserialize_with = "Option::deserialize")]
    pub msg_id: Option<serde_json::Value>,
    #[serde(rename = "subject", deserialize_with = "Option::deserialize")]
    pub subject: Option<serde_json::Value>,
    #[serde(rename = "to_email", deserialize_with = "Option::deserialize")]
    pub to_email: Option<serde_json::Value>,
    /// Quick summary of the status of a message
    #[serde(rename = "status", deserialize_with = "Option::deserialize")]
    pub status: Option<Status>,
    #[serde(rename = "template_id", deserialize_with = "Option::deserialize")]
    pub template_id: Option<serde_json::Value>,
    #[serde(rename = "asm_group_id", deserialize_with = "Option::deserialize")]
    pub asm_group_id: Option<serde_json::Value>,
    /// Teammate's username
    #[serde(rename = "teammate", deserialize_with = "Option::deserialize")]
    pub teammate: Option<serde_json::Value>,
    #[serde(rename = "api_key_id", deserialize_with = "Option::deserialize")]
    pub api_key_id: Option<serde_json::Value>,
    /// List of events related to email message
    #[serde(rename = "events", deserialize_with = "Option::deserialize")]
    pub events: Option<serde_json::Value>,
    /// This is the IP of the user who sent the message.
    #[serde(rename = "originating_ip", deserialize_with = "Option::deserialize")]
    pub originating_ip: Option<serde_json::Value>,
    /// Categories users associated to the message
    #[serde(rename = "categories", deserialize_with = "Option::deserialize")]
    pub categories: Option<serde_json::Value>,
    /// JSON hash of arbitrary key-value pairs
    #[serde(rename = "unique_args", deserialize_with = "Option::deserialize")]
    pub unique_args: Option<serde_json::Value>,
    /// IP used to send to the remote MTA. Used by UI to display IP in detailed view
    #[serde(rename = "outbound_ip", deserialize_with = "Option::deserialize")]
    pub outbound_ip: Option<serde_json::Value>,
    /// Whether or not the outbound IP is dedicated vs shared
    #[serde(rename = "outbound_ip_type", deserialize_with = "Option::deserialize")]
    pub outbound_ip_type: Option<OutboundIpType>,
}

impl Message {
    pub fn new(from_email: Option<serde_json::Value>, msg_id: Option<serde_json::Value>, subject: Option<serde_json::Value>, to_email: Option<serde_json::Value>, status: Option<Status>, template_id: Option<serde_json::Value>, asm_group_id: Option<serde_json::Value>, teammate: Option<serde_json::Value>, api_key_id: Option<serde_json::Value>, events: Option<serde_json::Value>, originating_ip: Option<serde_json::Value>, categories: Option<serde_json::Value>, unique_args: Option<serde_json::Value>, outbound_ip: Option<serde_json::Value>, outbound_ip_type: Option<OutboundIpType>) -> Message {
        Message {
            from_email,
            msg_id,
            subject,
            to_email,
            status,
            template_id,
            asm_group_id,
            teammate,
            api_key_id,
            events,
            originating_ip,
            categories,
            unique_args,
            outbound_ip,
            outbound_ip_type,
        }
    }
}

/// Quick summary of the status of a message
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "not_delivered")]
    NotDelivered,
    #[serde(rename = "delivered")]
    Delivered,
}

impl Default for Status {
    fn default() -> Status {
        Self::Processed
    }
}
/// Whether or not the outbound IP is dedicated vs shared
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutboundIpType {
    #[serde(rename = "dedicated")]
    Dedicated,
    #[serde(rename = "shared")]
    Shared,
}

impl Default for OutboundIpType {
    fn default() -> OutboundIpType {
        Self::Dedicated
    }
}

