/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContactExport {
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The export job's status. Allowed values: `pending`, `ready`, or `failure`.
    #[serde(rename = "status", deserialize_with = "Option::deserialize")]
    pub status: Option<Status>,
    /// The ISO8601 timestamp when the export was begun.
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
    /// The ISO8601 timestamp when the export was updated.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<serde_json::Value>,
    /// The ISO8601 timestamp when the export was completed.
    #[serde(rename = "completed_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub completed_at: Option<Option<serde_json::Value>>,
    /// The ISO8601 timestamp when the exported file on S3 will expire.
    #[serde(rename = "expires_at", deserialize_with = "Option::deserialize")]
    pub expires_at: Option<serde_json::Value>,
    /// One or more download URLs for the contact file if the status is `ready`.
    #[serde(rename = "urls", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub urls: Option<Option<serde_json::Value>>,
    /// A human readable message if the status is `failure`.
    #[serde(rename = "message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message: Option<Option<serde_json::Value>>,
    #[serde(rename = "_metadata", skip_serializing_if = "Option::is_none")]
    pub _metadata: Option<Box<crate::models::Metadata>>,
    /// The total number of exported contacts.
    #[serde(rename = "contact_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub contact_count: Option<Option<serde_json::Value>>,
}

impl ContactExport {
    pub fn new(id: Option<serde_json::Value>, status: Option<Status>, created_at: Option<serde_json::Value>, updated_at: Option<serde_json::Value>, expires_at: Option<serde_json::Value>) -> ContactExport {
        ContactExport {
            id,
            status,
            created_at,
            updated_at,
            completed_at: None,
            expires_at,
            urls: None,
            message: None,
            _metadata: None,
            contact_count: None,
        }
    }
}

/// The export job's status. Allowed values: `pending`, `ready`, or `failure`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "failure")]
    Failure,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

