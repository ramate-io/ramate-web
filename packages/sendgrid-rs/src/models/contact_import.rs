/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContactImport {
    /// The job ID.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<serde_json::Value>>,
    /// The job state. Allowed values: `pending`, `completed`, `errored`, or `failed`.
    #[serde(rename = "status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status: Option<Option<serde_json::Value>>,
    /// The job type. Allowed values: `upsert`, or `delete`.
    #[serde(rename = "job_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub job_type: Option<Option<serde_json::Value>>,
    #[serde(rename = "results", skip_serializing_if = "Option::is_none")]
    pub results: Option<Box<crate::models::ContactImportResults>>,
    /// The ISO8601 timestamp when the job was created.
    #[serde(rename = "started_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<Option<serde_json::Value>>,
    /// The ISO8601 timestamp when the job was finished.
    #[serde(rename = "finished_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<Option<serde_json::Value>>,
}

impl ContactImport {
    pub fn new() -> ContactImport {
        ContactImport {
            id: None,
            status: None,
            job_type: None,
            results: None,
            started_at: None,
            finished_at: None,
        }
    }
}


