/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AbbvMessage {
    #[serde(rename = "from_email", deserialize_with = "Option::deserialize")]
    pub from_email: Option<serde_json::Value>,
    #[serde(rename = "msg_id", deserialize_with = "Option::deserialize")]
    pub msg_id: Option<serde_json::Value>,
    #[serde(rename = "subject", deserialize_with = "Option::deserialize")]
    pub subject: Option<serde_json::Value>,
    #[serde(rename = "to_email", deserialize_with = "Option::deserialize")]
    pub to_email: Option<serde_json::Value>,
    #[serde(rename = "status", deserialize_with = "Option::deserialize")]
    pub status: Option<Status>,
    #[serde(rename = "opens_count", deserialize_with = "Option::deserialize")]
    pub opens_count: Option<serde_json::Value>,
    #[serde(rename = "clicks_count", deserialize_with = "Option::deserialize")]
    pub clicks_count: Option<serde_json::Value>,
    /// iso 8601 format
    #[serde(rename = "last_event_time", deserialize_with = "Option::deserialize")]
    pub last_event_time: Option<serde_json::Value>,
}

impl AbbvMessage {
    pub fn new(from_email: Option<serde_json::Value>, msg_id: Option<serde_json::Value>, subject: Option<serde_json::Value>, to_email: Option<serde_json::Value>, status: Option<Status>, opens_count: Option<serde_json::Value>, clicks_count: Option<serde_json::Value>, last_event_time: Option<serde_json::Value>) -> AbbvMessage {
        AbbvMessage {
            from_email,
            msg_id,
            subject,
            to_email,
            status,
            opens_count,
            clicks_count,
            last_event_time,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "not_delivered")]
    NotDelivered,
}

impl Default for Status {
    fn default() -> Status {
        Self::Processed
    }
}

