/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AuthenticationDomain {
    /// The ID of the authenticated domain.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The ID of the user that this domain is associated with.
    #[serde(rename = "user_id", deserialize_with = "Option::deserialize")]
    pub user_id: Option<serde_json::Value>,
    /// The subdomain to use for this authenticated domain.
    #[serde(rename = "subdomain", deserialize_with = "Option::deserialize")]
    pub subdomain: Option<serde_json::Value>,
    /// The domain to be authenticated.
    #[serde(rename = "domain", deserialize_with = "Option::deserialize")]
    pub domain: Option<serde_json::Value>,
    /// The username that this domain will be associated with.
    #[serde(rename = "username", deserialize_with = "Option::deserialize")]
    pub username: Option<serde_json::Value>,
    /// The IPs to be included in the custom SPF record for this authenticated domain.
    #[serde(rename = "ips", deserialize_with = "Option::deserialize")]
    pub ips: Option<serde_json::Value>,
    /// Indicates whether this authenticated domain uses custom SPF.
    #[serde(rename = "custom_spf", deserialize_with = "Option::deserialize")]
    pub custom_spf: Option<serde_json::Value>,
    /// Indicates if this is the default authenticated domain.
    #[serde(rename = "default", deserialize_with = "Option::deserialize")]
    pub default: Option<serde_json::Value>,
    /// Indicates if this authenticated domain was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new authenticated domain if you need to update it.
    #[serde(rename = "legacy", deserialize_with = "Option::deserialize")]
    pub legacy: Option<serde_json::Value>,
    /// Indicates if this authenticated domain uses automated security.
    #[serde(rename = "automatic_security", deserialize_with = "Option::deserialize")]
    pub automatic_security: Option<serde_json::Value>,
    /// Indicates if this is a valid authenticated domain.
    #[serde(rename = "valid", deserialize_with = "Option::deserialize")]
    pub valid: Option<serde_json::Value>,
    #[serde(rename = "dns")]
    pub dns: Box<crate::models::AuthenticationDomainDns>,
}

impl AuthenticationDomain {
    pub fn new(id: Option<serde_json::Value>, user_id: Option<serde_json::Value>, subdomain: Option<serde_json::Value>, domain: Option<serde_json::Value>, username: Option<serde_json::Value>, ips: Option<serde_json::Value>, custom_spf: Option<serde_json::Value>, default: Option<serde_json::Value>, legacy: Option<serde_json::Value>, automatic_security: Option<serde_json::Value>, valid: Option<serde_json::Value>, dns: crate::models::AuthenticationDomainDns) -> AuthenticationDomain {
        AuthenticationDomain {
            id,
            user_id,
            subdomain,
            domain,
            username,
            ips,
            custom_spf,
            default,
            legacy,
            automatic_security,
            valid,
            dns: Box::new(dns),
        }
    }
}


