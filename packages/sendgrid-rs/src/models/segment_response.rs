/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SegmentResponse {
    /// ID assigned to the segment when created.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// Name of the segment.
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<serde_json::Value>,
    /// SQL query which will filter contacts based on the conditions provided
    #[serde(rename = "query_dsl", deserialize_with = "Option::deserialize")]
    pub query_dsl: Option<serde_json::Value>,
    /// Total number of contacts present in the segment
    #[serde(rename = "contacts_count", deserialize_with = "Option::deserialize")]
    pub contacts_count: Option<serde_json::Value>,
    /// A subset of all contacts that are in this segment
    #[serde(rename = "contacts_sample", deserialize_with = "Option::deserialize")]
    pub contacts_sample: Option<serde_json::Value>,
    /// ISO8601 timestamp of when the object was created
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
    /// ISO8601 timestamp of when the object was last updated
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<serde_json::Value>,
    /// ISO8601 timestamp of when the samples were last updated
    #[serde(rename = "sample_updated_at", deserialize_with = "Option::deserialize")]
    pub sample_updated_at: Option<serde_json::Value>,
    /// ISO8601 timestamp of when the samples will be next updated
    #[serde(rename = "next_sample_update", deserialize_with = "Option::deserialize")]
    pub next_sample_update: Option<serde_json::Value>,
    /// The array of list ids to filter contacts on when building this segment. It allows only one such list id for now. We will support more in future
    #[serde(rename = "parent_list_ids", deserialize_with = "Option::deserialize")]
    pub parent_list_ids: Option<serde_json::Value>,
    /// If not set, segment contains a Query for use with Segment v1 APIs. If set to '2', segment contains a SQL query for use in v2.
    #[serde(rename = "query_version", deserialize_with = "Option::deserialize")]
    pub query_version: Option<serde_json::Value>,
    #[serde(rename = "status")]
    pub status: Box<crate::models::SegmentStatusResponse>,
}

impl SegmentResponse {
    pub fn new(id: Option<serde_json::Value>, name: Option<serde_json::Value>, query_dsl: Option<serde_json::Value>, contacts_count: Option<serde_json::Value>, contacts_sample: Option<serde_json::Value>, created_at: Option<serde_json::Value>, updated_at: Option<serde_json::Value>, sample_updated_at: Option<serde_json::Value>, next_sample_update: Option<serde_json::Value>, parent_list_ids: Option<serde_json::Value>, query_version: Option<serde_json::Value>, status: crate::models::SegmentStatusResponse) -> SegmentResponse {
        SegmentResponse {
            id,
            name,
            query_dsl,
            contacts_count,
            contacts_sample,
            created_at,
            updated_at,
            sample_updated_at,
            next_sample_update,
            parent_list_ids,
            query_version,
            status: Box::new(status),
        }
    }
}


