/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PostWhitelabelLinksIdValidate200ResponseValidationResultsDomainCname : The DNS record generated for the sending domain used for this branded link.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostWhitelabelLinksIdValidate200ResponseValidationResultsDomainCname {
    /// Indicates if this DNS record is valid.
    #[serde(rename = "valid", deserialize_with = "Option::deserialize")]
    pub valid: Option<Valid>,
    /// Null if the DNS record is valid. If the DNS record is invalid, this will explain why.
    #[serde(rename = "reason", deserialize_with = "Option::deserialize")]
    pub reason: Option<serde_json::Value>,
}

impl PostWhitelabelLinksIdValidate200ResponseValidationResultsDomainCname {
    /// The DNS record generated for the sending domain used for this branded link.
    pub fn new(valid: Option<Valid>, reason: Option<serde_json::Value>) -> PostWhitelabelLinksIdValidate200ResponseValidationResultsDomainCname {
        PostWhitelabelLinksIdValidate200ResponseValidationResultsDomainCname {
            valid,
            reason,
        }
    }
}

/// Indicates if this DNS record is valid.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Valid {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

impl Default for Valid {
    fn default() -> Valid {
        Self::True
    }
}

