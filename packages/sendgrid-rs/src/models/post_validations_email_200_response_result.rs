/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostValidationsEmail200ResponseResult {
    /// The email being validated
    #[serde(rename = "email", deserialize_with = "Option::deserialize")]
    pub email: Option<serde_json::Value>,
    /// A generic classification of whether or not the email address is valid.
    #[serde(rename = "verdict", deserialize_with = "Option::deserialize")]
    pub verdict: Option<Verdict>,
    /// A numeric representation of the email validity.
    #[serde(rename = "score", deserialize_with = "Option::deserialize")]
    pub score: Option<serde_json::Value>,
    /// The local part of the email address.
    #[serde(rename = "local", deserialize_with = "Option::deserialize")]
    pub local: Option<serde_json::Value>,
    /// The domain of the email address.
    #[serde(rename = "host", deserialize_with = "Option::deserialize")]
    pub host: Option<serde_json::Value>,
    /// A suggested correction in the event of domain name typos (e.g., gmial.com)
    #[serde(rename = "suggestion", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suggestion: Option<Option<serde_json::Value>>,
    #[serde(rename = "checks")]
    pub checks: Box<crate::models::PostValidationsEmail200ResponseResultChecks>,
    /// The source of the validation, as per the API request.
    #[serde(rename = "source", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub source: Option<Option<serde_json::Value>>,
    /// The IP address associated with this email.
    #[serde(rename = "ip_address", deserialize_with = "Option::deserialize")]
    pub ip_address: Option<serde_json::Value>,
}

impl PostValidationsEmail200ResponseResult {
    pub fn new(email: Option<serde_json::Value>, verdict: Option<Verdict>, score: Option<serde_json::Value>, local: Option<serde_json::Value>, host: Option<serde_json::Value>, checks: crate::models::PostValidationsEmail200ResponseResultChecks, ip_address: Option<serde_json::Value>) -> PostValidationsEmail200ResponseResult {
        PostValidationsEmail200ResponseResult {
            email,
            verdict,
            score,
            local,
            host,
            suggestion: None,
            checks: Box::new(checks),
            source: None,
            ip_address,
        }
    }
}

/// A generic classification of whether or not the email address is valid.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Verdict {
    #[serde(rename = "Valid")]
    Valid,
    #[serde(rename = "Risky")]
    Risky,
    #[serde(rename = "Invalid")]
    Invalid,
}

impl Default for Verdict {
    fn default() -> Verdict {
        Self::Valid
    }
}

