/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SinglesendRequestEmailConfig {
    /// The subject line of the Single Send. Do not include this field when using a `design_id`.
    #[serde(rename = "subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Option<serde_json::Value>>,
    /// The HTML content of the Single Send. Do not include this field when using a `design_id`.
    #[serde(rename = "html_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub html_content: Option<Option<serde_json::Value>>,
    /// The plain text content of the Single Send. Do not include this field when using a `design_id`.
    #[serde(rename = "plain_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plain_content: Option<Option<serde_json::Value>>,
    /// If set to `true`, `plain_content` is always generated from `html_content`. If set to false, `plain_content` is not altered.
    #[serde(rename = "generate_plain_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub generate_plain_content: Option<Option<serde_json::Value>>,
    /// A `design_id` can be used in place of `html_content`, `plain_content`, and/or `subject`. You can retrieve a design's ID from the [\"List Designs\" endpoint](https://sendgrid.api-docs.io/v3.0/designs-api/list-designs) or by pulling it from the design's detail page URL in the Marketing Campaigns App.
    #[serde(rename = "design_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub design_id: Option<Option<serde_json::Value>>,
    /// The editor — `\"design\"` or `\"code\"` — used to modify the Single Send's design in the Marketing Campaigns App.
    #[serde(rename = "editor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub editor: Option<Option<Editor>>,
    /// The ID of the Suppression Group to allow recipients to unsubscribe — you must provide this or the `custom_unsubscribe_url`.
    #[serde(rename = "suppression_group_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suppression_group_id: Option<Option<serde_json::Value>>,
    /// The URL allowing recipients to unsubscribe — you must provide this or the `suppression_group_id`.
    #[serde(rename = "custom_unsubscribe_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_unsubscribe_url: Option<Option<serde_json::Value>>,
    /// The ID of the verified Sender. You can retrieve a verified Sender's ID from the [\"Get Verified Senders\" endpoint](https://sendgrid.api-docs.io/v3.0/sender-verification/get-verified-senders) or by pulling it from the Sender's detail page URL in the SendGrid App.
    #[serde(rename = "sender_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sender_id: Option<Option<serde_json::Value>>,
    /// The name of the IP Pool from which the Single Send emails are sent.
    #[serde(rename = "ip_pool", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ip_pool: Option<Option<serde_json::Value>>,
}

impl SinglesendRequestEmailConfig {
    pub fn new() -> SinglesendRequestEmailConfig {
        SinglesendRequestEmailConfig {
            subject: None,
            html_content: None,
            plain_content: None,
            generate_plain_content: None,
            design_id: None,
            editor: None,
            suppression_group_id: None,
            custom_unsubscribe_url: None,
            sender_id: None,
            ip_pool: None,
        }
    }
}

/// The editor — `\"design\"` or `\"code\"` — used to modify the Single Send's design in the Marketing Campaigns App.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Editor {
    #[serde(rename = "code")]
    Code,
    #[serde(rename = "design")]
    Design,
}

impl Default for Editor {
    fn default() -> Editor {
        Self::Code
    }
}

