/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VerifiedSenderResponseSchema {
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<serde_json::Value>>,
    #[serde(rename = "nickname", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<Option<serde_json::Value>>,
    #[serde(rename = "from_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub from_email: Option<Option<serde_json::Value>>,
    #[serde(rename = "from_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub from_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "reply_to", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reply_to: Option<Option<serde_json::Value>>,
    #[serde(rename = "reply_to_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reply_to_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address: Option<Option<serde_json::Value>>,
    #[serde(rename = "address2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address2: Option<Option<serde_json::Value>>,
    #[serde(rename = "state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state: Option<Option<serde_json::Value>>,
    #[serde(rename = "city", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub city: Option<Option<serde_json::Value>>,
    #[serde(rename = "zip", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zip: Option<Option<serde_json::Value>>,
    #[serde(rename = "country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country: Option<Option<serde_json::Value>>,
    #[serde(rename = "verified", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub verified: Option<Option<serde_json::Value>>,
    #[serde(rename = "locked", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub locked: Option<Option<serde_json::Value>>,
}

impl VerifiedSenderResponseSchema {
    pub fn new() -> VerifiedSenderResponseSchema {
        VerifiedSenderResponseSchema {
            id: None,
            nickname: None,
            from_email: None,
            from_name: None,
            reply_to: None,
            reply_to_name: None,
            address: None,
            address2: None,
            state: None,
            city: None,
            zip: None,
            country: None,
            verified: None,
            locked: None,
        }
    }
}


