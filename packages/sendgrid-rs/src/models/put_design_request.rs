/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PutDesignRequest {
    /// Name of the Design.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<serde_json::Value>>,
    /// The HTML content of the Design.
    #[serde(rename = "html_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub html_content: Option<Option<serde_json::Value>>,
    /// Plain text content of the Design.
    #[serde(rename = "plain_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plain_content: Option<Option<serde_json::Value>>,
    /// If true, plain_content is always generated from html_content. If false, plain_content is not altered.
    #[serde(rename = "generate_plain_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub generate_plain_content: Option<Option<serde_json::Value>>,
    /// Subject of the Design.
    #[serde(rename = "subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Option<serde_json::Value>>,
    /// The list of categories applied to the design
    #[serde(rename = "categories", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Option<serde_json::Value>>,
}

impl PutDesignRequest {
    pub fn new() -> PutDesignRequest {
        PutDesignRequest {
            name: None,
            html_content: None,
            plain_content: None,
            generate_plain_content: None,
            subject: None,
            categories: None,
        }
    }
}


