/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostWhitelabelLinksRequest {
    /// The root domain for the subdomain that you are creating the link branding for. This should match your FROM email address.
    #[serde(rename = "domain", deserialize_with = "Option::deserialize")]
    pub domain: Option<serde_json::Value>,
    /// The subdomain to create the link branding for. Must be different from the subdomain you used for authenticating your domain.
    #[serde(rename = "subdomain", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subdomain: Option<Option<serde_json::Value>>,
    /// Indicates if you want to use this link branding as the default or fallback. When setting a new default, the existing default link branding will have its default status removed automatically.
    #[serde(rename = "default", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default: Option<Option<Default>>,
}

impl PostWhitelabelLinksRequest {
    pub fn new(domain: Option<serde_json::Value>) -> PostWhitelabelLinksRequest {
        PostWhitelabelLinksRequest {
            domain,
            subdomain: None,
            default: None,
        }
    }
}

/// Indicates if you want to use this link branding as the default or fallback. When setting a new default, the existing default link branding will have its default status removed automatically.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Default {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

impl std::default::Default for Default {
    fn default() -> Default {
        Self::True
    }
}

