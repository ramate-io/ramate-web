/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SegmentSummary {
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    #[serde(rename = "contacts_count", deserialize_with = "Option::deserialize")]
    pub contacts_count: Option<serde_json::Value>,
    /// ISO8601 of created timestamp 
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<serde_json::Value>>,
    /// The id of the list if this segment is a child of a list.  This implies the query `AND CONTAINS(list_ids, ${parent_list_id})`
    #[serde(rename = "parent_list_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_list_id: Option<Option<serde_json::Value>>,
    /// ISO8601 timestamp the sample was last updated
    #[serde(rename = "sample_updated_at", deserialize_with = "Option::deserialize")]
    pub sample_updated_at: Option<serde_json::Value>,
    /// ISO8601 timestamp the object was last updated
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<serde_json::Value>,
    /// ISO8601 string that is equal to `sample_updated_at` plus an internally calculated offset that depends on how often contacts enter or exit segments as the scheduled pipeline updates the samples.
    #[serde(rename = "next_sample_update", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_sample_update: Option<Option<serde_json::Value>>,
}

impl SegmentSummary {
    pub fn new(id: Option<serde_json::Value>, contacts_count: Option<serde_json::Value>, created_at: Option<serde_json::Value>, sample_updated_at: Option<serde_json::Value>, updated_at: Option<serde_json::Value>) -> SegmentSummary {
        SegmentSummary {
            id,
            contacts_count,
            created_at,
            name: None,
            parent_list_id: None,
            sample_updated_at,
            updated_at,
            next_sample_update: None,
        }
    }
}


