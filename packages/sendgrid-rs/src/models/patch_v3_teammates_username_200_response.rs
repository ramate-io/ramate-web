/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PatchV3TeammatesUsername200Response {
    /// Teammate's username
    #[serde(rename = "username", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub username: Option<Option<serde_json::Value>>,
    /// Teammate's first name
    #[serde(rename = "first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<serde_json::Value>>,
    /// Teammate's last name
    #[serde(rename = "last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<serde_json::Value>>,
    /// Teammate's email address
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<serde_json::Value>>,
    /// Scopes given to teammate
    #[serde(rename = "scopes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Option<serde_json::Value>>,
    /// Indicate the type of user: owner user, teammate admin user, or normal teammate
    #[serde(rename = "user_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_type: Option<Option<UserType>>,
    /// Set to true if teammate has admin priveleges
    #[serde(rename = "is_admin", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_admin: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's phone number
    #[serde(rename = "phone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's website
    #[serde(rename = "website", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub website: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's address
    #[serde(rename = "address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's address
    #[serde(rename = "address2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address2: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's city
    #[serde(rename = "city", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub city: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's state
    #[serde(rename = "state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's zip
    #[serde(rename = "zip", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zip: Option<Option<serde_json::Value>>,
    /// (optional) Teammate's country
    #[serde(rename = "country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country: Option<Option<serde_json::Value>>,
}

impl PatchV3TeammatesUsername200Response {
    pub fn new() -> PatchV3TeammatesUsername200Response {
        PatchV3TeammatesUsername200Response {
            username: None,
            first_name: None,
            last_name: None,
            email: None,
            scopes: None,
            user_type: None,
            is_admin: None,
            phone: None,
            website: None,
            address: None,
            address2: None,
            city: None,
            state: None,
            zip: None,
            country: None,
        }
    }
}

/// Indicate the type of user: owner user, teammate admin user, or normal teammate
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserType {
    #[serde(rename = "admin")]
    Admin,
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "teammate")]
    Teammate,
}

impl Default for UserType {
    fn default() -> UserType {
        Self::Admin
    }
}

