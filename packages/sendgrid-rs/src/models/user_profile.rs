/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserProfile {
    /// The street address for this user profile.
    #[serde(rename = "address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address: Option<Option<serde_json::Value>>,
    /// An optional second line for the street address of this user profile.
    #[serde(rename = "address2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address2: Option<Option<serde_json::Value>>,
    /// The city for the user profile.
    #[serde(rename = "city", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub city: Option<Option<serde_json::Value>>,
    /// That company that this user profile is associated with.
    #[serde(rename = "company", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub company: Option<Option<serde_json::Value>>,
    /// Th country of this user profile.
    #[serde(rename = "country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country: Option<Option<serde_json::Value>>,
    /// The first name of the user.
    #[serde(rename = "first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<serde_json::Value>>,
    /// The last name of the user.
    #[serde(rename = "last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<serde_json::Value>>,
    /// The phone number for the user.
    #[serde(rename = "phone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone: Option<Option<serde_json::Value>>,
    /// The state for this user.
    #[serde(rename = "state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state: Option<Option<serde_json::Value>>,
    /// The website associated with this user.
    #[serde(rename = "website", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub website: Option<Option<serde_json::Value>>,
    /// The zip code for this user.
    #[serde(rename = "zip", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zip: Option<Option<serde_json::Value>>,
}

impl UserProfile {
    pub fn new() -> UserProfile {
        UserProfile {
            address: None,
            address2: None,
            city: None,
            company: None,
            country: None,
            first_name: None,
            last_name: None,
            phone: None,
            state: None,
            website: None,
            zip: None,
        }
    }
}


