/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostAlertsRequest {
    /// The type of alert you want to create. Can be either usage_limit or stats_notification. Example: usage_limit
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<RHashType>,
    /// The email address the alert will be sent to. Example: test@example.com
    #[serde(rename = "email_to", deserialize_with = "Option::deserialize")]
    pub email_to: Option<serde_json::Value>,
    /// Required for stats_notification. How frequently the alert will be sent. Example: daily
    #[serde(rename = "frequency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Option<serde_json::Value>>,
    /// Required for usage_alert. When this usage threshold is reached, the alert will be sent. Example: 90
    #[serde(rename = "percentage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub percentage: Option<Option<serde_json::Value>>,
}

impl PostAlertsRequest {
    pub fn new(r#type: Option<RHashType>, email_to: Option<serde_json::Value>) -> PostAlertsRequest {
        PostAlertsRequest {
            r#type,
            email_to,
            frequency: None,
            percentage: None,
        }
    }
}

/// The type of alert you want to create. Can be either usage_limit or stats_notification. Example: usage_limit
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "stats_notification")]
    StatsNotification,
    #[serde(rename = "usage_limit")]
    UsageLimit,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::StatsNotification
    }
}

