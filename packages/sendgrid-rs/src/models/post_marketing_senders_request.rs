/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostMarketingSendersRequest {
    /// A nickname for the sender identity. Not used for sending.
    #[serde(rename = "nickname", deserialize_with = "Option::deserialize")]
    pub nickname: Option<serde_json::Value>,
    #[serde(rename = "from")]
    pub from: Box<crate::models::PostMarketingSendersRequestFrom>,
    #[serde(rename = "reply_to", skip_serializing_if = "Option::is_none")]
    pub reply_to: Option<Box<crate::models::PostMarketingSendersRequestReplyTo>>,
    /// The physical address of the sender identity.
    #[serde(rename = "address", deserialize_with = "Option::deserialize")]
    pub address: Option<serde_json::Value>,
    /// Additional sender identity address information.
    #[serde(rename = "address_2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_2: Option<Option<serde_json::Value>>,
    /// The city of the sender identity.
    #[serde(rename = "city", deserialize_with = "Option::deserialize")]
    pub city: Option<serde_json::Value>,
    /// The state of the sender identity.
    #[serde(rename = "state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state: Option<Option<serde_json::Value>>,
    /// The zipcode of the sender identity.
    #[serde(rename = "zip", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zip: Option<Option<serde_json::Value>>,
    /// The country of the sender identity.
    #[serde(rename = "country", deserialize_with = "Option::deserialize")]
    pub country: Option<serde_json::Value>,
}

impl PostMarketingSendersRequest {
    pub fn new(nickname: Option<serde_json::Value>, from: crate::models::PostMarketingSendersRequestFrom, address: Option<serde_json::Value>, city: Option<serde_json::Value>, country: Option<serde_json::Value>) -> PostMarketingSendersRequest {
        PostMarketingSendersRequest {
            nickname,
            from: Box::new(from),
            reply_to: None,
            address,
            address_2: None,
            city,
            state: None,
            zip: None,
            country,
        }
    }
}


