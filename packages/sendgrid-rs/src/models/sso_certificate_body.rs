/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SsoCertificateBody {
    /// This certificate is used by Twilio SendGrid to verify that SAML requests are coming from Okta. This is called the X509 certificate in the Twilio SendGrid UI.
    #[serde(rename = "public_certificate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_certificate: Option<Option<serde_json::Value>>,
    /// A unique ID assigned to the certificate by SendGrid.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<serde_json::Value>>,
    /// A unix timestamp (e.g., 1603915954) that indicates the time before which the certificate is not valid.
    #[serde(rename = "not_before", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub not_before: Option<Option<serde_json::Value>>,
    /// A unix timestamp (e.g., 1603915954) that indicates the time after which the certificate is no longer valid.
    #[serde(rename = "not_after", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub not_after: Option<Option<serde_json::Value>>,
    /// An ID that matches a certificate to a specific IdP integration.
    #[serde(rename = "intergration_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub intergration_id: Option<Option<serde_json::Value>>,
}

impl SsoCertificateBody {
    pub fn new() -> SsoCertificateBody {
        SsoCertificateBody {
            public_certificate: None,
            id: None,
            not_before: None,
            not_after: None,
            intergration_id: None,
        }
    }
}


