/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostWhitelabelIpsIdValidate200ResponseValidationResultsARecord {
    /// Indicates if the reverse DNS record could be validated.
    #[serde(rename = "valid", deserialize_with = "Option::deserialize")]
    pub valid: Option<Valid>,
    /// The reason the reverse DNS record could not be validated. Is `null` if the reverse DNS record was validated.
    #[serde(rename = "reason", deserialize_with = "Option::deserialize")]
    pub reason: Option<serde_json::Value>,
}

impl PostWhitelabelIpsIdValidate200ResponseValidationResultsARecord {
    pub fn new(valid: Option<Valid>, reason: Option<serde_json::Value>) -> PostWhitelabelIpsIdValidate200ResponseValidationResultsARecord {
        PostWhitelabelIpsIdValidate200ResponseValidationResultsARecord {
            valid,
            reason,
        }
    }
}

/// Indicates if the reverse DNS record could be validated.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Valid {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

impl Default for Valid {
    fn default() -> Valid {
        Self::True
    }
}

