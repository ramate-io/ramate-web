/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ReverseDns {
    /// The ID of the Reverse DNS.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The IP address that this Reverse DNS was created for.
    #[serde(rename = "ip", deserialize_with = "Option::deserialize")]
    pub ip: Option<serde_json::Value>,
    /// The reverse DNS record for the IP address. This points to the Reverse DNS subdomain.
    #[serde(rename = "rdns", deserialize_with = "Option::deserialize")]
    pub rdns: Option<serde_json::Value>,
    /// The users who are able to send mail from the IP address.
    #[serde(rename = "users", deserialize_with = "Option::deserialize")]
    pub users: Option<serde_json::Value>,
    /// The subdomain created for this reverse DNS. This is where the rDNS record points.
    #[serde(rename = "subdomain", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subdomain: Option<Option<serde_json::Value>>,
    /// The root, or sending, domain.
    #[serde(rename = "domain", deserialize_with = "Option::deserialize")]
    pub domain: Option<serde_json::Value>,
    /// Indicates if this is a valid Reverse DNS.
    #[serde(rename = "valid", deserialize_with = "Option::deserialize")]
    pub valid: Option<serde_json::Value>,
    /// Indicates if this Reverse DNS was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new Reverse DNS if you need to update it.
    #[serde(rename = "legacy", deserialize_with = "Option::deserialize")]
    pub legacy: Option<serde_json::Value>,
    /// A Unix epoch timestamp representing the last time of a validation attempt.
    #[serde(rename = "last_validation_attempt_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_validation_attempt_at: Option<Option<serde_json::Value>>,
    #[serde(rename = "a_record")]
    pub a_record: Box<crate::models::ReverseDnsARecord>,
}

impl ReverseDns {
    pub fn new(id: Option<serde_json::Value>, ip: Option<serde_json::Value>, rdns: Option<serde_json::Value>, users: Option<serde_json::Value>, domain: Option<serde_json::Value>, valid: Option<serde_json::Value>, legacy: Option<serde_json::Value>, a_record: crate::models::ReverseDnsARecord) -> ReverseDns {
        ReverseDns {
            id,
            ip,
            rdns,
            users,
            subdomain: None,
            domain,
            valid,
            legacy,
            last_validation_attempt_at: None,
            a_record: Box::new(a_record),
        }
    }
}


