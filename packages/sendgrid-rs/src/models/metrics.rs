/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Metrics {
    #[serde(rename = "bounce_drops", deserialize_with = "Option::deserialize")]
    pub bounce_drops: Option<serde_json::Value>,
    #[serde(rename = "bounces", deserialize_with = "Option::deserialize")]
    pub bounces: Option<serde_json::Value>,
    #[serde(rename = "clicks", deserialize_with = "Option::deserialize")]
    pub clicks: Option<serde_json::Value>,
    #[serde(rename = "delivered", deserialize_with = "Option::deserialize")]
    pub delivered: Option<serde_json::Value>,
    #[serde(rename = "invalid_emails", deserialize_with = "Option::deserialize")]
    pub invalid_emails: Option<serde_json::Value>,
    #[serde(rename = "opens", deserialize_with = "Option::deserialize")]
    pub opens: Option<serde_json::Value>,
    #[serde(rename = "requests", deserialize_with = "Option::deserialize")]
    pub requests: Option<serde_json::Value>,
    #[serde(rename = "spam_report_drops", deserialize_with = "Option::deserialize")]
    pub spam_report_drops: Option<serde_json::Value>,
    #[serde(rename = "spam_reports", deserialize_with = "Option::deserialize")]
    pub spam_reports: Option<serde_json::Value>,
    #[serde(rename = "unique_clicks", deserialize_with = "Option::deserialize")]
    pub unique_clicks: Option<serde_json::Value>,
    #[serde(rename = "unique_opens", deserialize_with = "Option::deserialize")]
    pub unique_opens: Option<serde_json::Value>,
    #[serde(rename = "unsubscribes", deserialize_with = "Option::deserialize")]
    pub unsubscribes: Option<serde_json::Value>,
}

impl Metrics {
    pub fn new(bounce_drops: Option<serde_json::Value>, bounces: Option<serde_json::Value>, clicks: Option<serde_json::Value>, delivered: Option<serde_json::Value>, invalid_emails: Option<serde_json::Value>, opens: Option<serde_json::Value>, requests: Option<serde_json::Value>, spam_report_drops: Option<serde_json::Value>, spam_reports: Option<serde_json::Value>, unique_clicks: Option<serde_json::Value>, unique_opens: Option<serde_json::Value>, unsubscribes: Option<serde_json::Value>) -> Metrics {
        Metrics {
            bounce_drops,
            bounces,
            clicks,
            delivered,
            invalid_emails,
            opens,
            requests,
            spam_report_drops,
            spam_reports,
            unique_clicks,
            unique_opens,
            unsubscribes,
        }
    }
}


