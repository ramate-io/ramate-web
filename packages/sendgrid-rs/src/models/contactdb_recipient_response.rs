/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContactdbRecipientResponse {
    /// The number of errors found while adding recipients.
    #[serde(rename = "error_count", deserialize_with = "Option::deserialize")]
    pub error_count: Option<serde_json::Value>,
    /// The indices of the recipient(s) sent that caused the error. 
    #[serde(rename = "error_indices", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error_indices: Option<Option<serde_json::Value>>,
    /// The count of new recipients added to the contactdb.
    #[serde(rename = "new_count", deserialize_with = "Option::deserialize")]
    pub new_count: Option<serde_json::Value>,
    /// The recipient IDs of the recipients that already existed from this request.
    #[serde(rename = "persisted_recipients", deserialize_with = "Option::deserialize")]
    pub persisted_recipients: Option<serde_json::Value>,
    /// The recipients who were updated from this request.
    #[serde(rename = "updated_count", deserialize_with = "Option::deserialize")]
    pub updated_count: Option<serde_json::Value>,
    #[serde(rename = "errors", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Option<serde_json::Value>>,
}

impl ContactdbRecipientResponse {
    pub fn new(error_count: Option<serde_json::Value>, new_count: Option<serde_json::Value>, persisted_recipients: Option<serde_json::Value>, updated_count: Option<serde_json::Value>) -> ContactdbRecipientResponse {
        ContactdbRecipientResponse {
            error_count,
            error_indices: None,
            new_count,
            persisted_recipients,
            updated_count,
            errors: None,
        }
    }
}


