/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetAlertsAlertId200Response {
    /// A Unix timestamp indicating when the alert was created.
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
    /// The email address that the alert will be sent to.
    #[serde(rename = "email_to", deserialize_with = "Option::deserialize")]
    pub email_to: Option<serde_json::Value>,
    /// If the alert is of type stats_notification, this indicates how frequently the stats notifications will be sent. For example: \"daily\", \"weekly\", or \"monthly\".
    #[serde(rename = "frequency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Option<serde_json::Value>>,
    /// The ID of the alert.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The type of alert.
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<RHashType>,
    /// A Unix timestamp indicating when the alert was last modified.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<serde_json::Value>,
    /// If the alert is of type usage_limit, this indicates the percentage of email usage that must be reached before the alert will be sent.
    #[serde(rename = "percentage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub percentage: Option<Option<serde_json::Value>>,
}

impl GetAlertsAlertId200Response {
    pub fn new(created_at: Option<serde_json::Value>, email_to: Option<serde_json::Value>, id: Option<serde_json::Value>, r#type: Option<RHashType>, updated_at: Option<serde_json::Value>) -> GetAlertsAlertId200Response {
        GetAlertsAlertId200Response {
            created_at,
            email_to,
            frequency: None,
            id,
            r#type,
            updated_at,
            percentage: None,
        }
    }
}

/// The type of alert.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "usage_alert")]
    UsageAlert,
    #[serde(rename = "stats_notification")]
    StatsNotification,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::UsageAlert
    }
}

