/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SubuserPost {
    /// The username of the subuser.
    #[serde(rename = "username", deserialize_with = "Option::deserialize")]
    pub username: Option<serde_json::Value>,
    /// The user ID for this subuser.
    #[serde(rename = "user_id", deserialize_with = "Option::deserialize")]
    pub user_id: Option<serde_json::Value>,
    /// The email address for this subuser.
    #[serde(rename = "email", deserialize_with = "Option::deserialize")]
    pub email: Option<serde_json::Value>,
    #[serde(rename = "signup_session_token", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub signup_session_token: Option<Option<serde_json::Value>>,
    #[serde(rename = "authorization_token", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub authorization_token: Option<Option<serde_json::Value>>,
    #[serde(rename = "credit_allocation", skip_serializing_if = "Option::is_none")]
    pub credit_allocation: Option<Box<crate::models::SubuserPostCreditAllocation>>,
}

impl SubuserPost {
    pub fn new(username: Option<serde_json::Value>, user_id: Option<serde_json::Value>, email: Option<serde_json::Value>) -> SubuserPost {
        SubuserPost {
            username,
            user_id,
            email,
            signup_session_token: None,
            authorization_token: None,
            credit_allocation: None,
        }
    }
}


