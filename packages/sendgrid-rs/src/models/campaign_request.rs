/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CampaignRequest {
    /// The display title of your campaign. This will be viewable by you in the Marketing Campaigns UI.
    #[serde(rename = "title", deserialize_with = "Option::deserialize")]
    pub title: Option<serde_json::Value>,
    /// The subject of your campaign that your recipients will see.
    #[serde(rename = "subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Option<serde_json::Value>>,
    /// The ID of the \"sender\" identity that you have created. Your recipients will see this as the \"from\" on your marketing emails.
    #[serde(rename = "sender_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sender_id: Option<Option<serde_json::Value>>,
    /// The IDs of the lists you are sending this campaign to. You can have both segment IDs and list IDs
    #[serde(rename = "list_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub list_ids: Option<Option<serde_json::Value>>,
    /// The segment IDs that you are sending this list to. You can have both segment IDs and list IDs. Segments are limited to 10 segment IDs.
    #[serde(rename = "segment_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub segment_ids: Option<Option<serde_json::Value>>,
    /// The categories you would like associated to this campaign.
    #[serde(rename = "categories", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Option<serde_json::Value>>,
    /// The suppression group that this marketing email belongs to, allowing recipients to opt-out of emails of this type.
    #[serde(rename = "suppression_group_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suppression_group_id: Option<Option<serde_json::Value>>,
    /// This is the url of the custom unsubscribe page that you provide for customers to unsubscribe from your suppression groups.
    #[serde(rename = "custom_unsubscribe_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_unsubscribe_url: Option<Option<serde_json::Value>>,
    /// The pool of IPs that you would like to send this email from.
    #[serde(rename = "ip_pool", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ip_pool: Option<Option<serde_json::Value>>,
    /// The HTML of your marketing email.
    #[serde(rename = "html_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub html_content: Option<Option<serde_json::Value>>,
    /// The plain text content of your emails.
    #[serde(rename = "plain_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plain_content: Option<Option<serde_json::Value>>,
    /// The editor used in the UI.
    #[serde(rename = "editor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub editor: Option<Option<Editor>>,
}

impl CampaignRequest {
    pub fn new(title: Option<serde_json::Value>) -> CampaignRequest {
        CampaignRequest {
            title,
            subject: None,
            sender_id: None,
            list_ids: None,
            segment_ids: None,
            categories: None,
            suppression_group_id: None,
            custom_unsubscribe_url: None,
            ip_pool: None,
            html_content: None,
            plain_content: None,
            editor: None,
        }
    }
}

/// The editor used in the UI.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Editor {
    #[serde(rename = "code")]
    Code,
    #[serde(rename = "design")]
    Design,
}

impl Default for Editor {
    fn default() -> Editor {
        Self::Code
    }
}

