/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhooksEventWebhookRequest {
    /// Indicates if the event webhook is enabled.
    #[serde(rename = "enabled", deserialize_with = "Option::deserialize")]
    pub enabled: Option<serde_json::Value>,
    /// The URL that you want the event webhook to POST to.
    #[serde(rename = "url", deserialize_with = "Option::deserialize")]
    pub url: Option<serde_json::Value>,
    /// Recipient resubscribes to specific group by updating preferences. You need to enable Subscription Tracking for getting this type of event.
    #[serde(rename = "group_resubscribe", deserialize_with = "Option::deserialize")]
    pub group_resubscribe: Option<serde_json::Value>,
    /// Message has been successfully delivered to the receiving server.
    #[serde(rename = "delivered", deserialize_with = "Option::deserialize")]
    pub delivered: Option<serde_json::Value>,
    /// Recipient unsubscribe from specific group, by either direct link or updating preferences. You need to enable Subscription Tracking for getting this type of event.
    #[serde(rename = "group_unsubscribe", deserialize_with = "Option::deserialize")]
    pub group_unsubscribe: Option<serde_json::Value>,
    /// Recipient marked a message as spam.
    #[serde(rename = "spam_report", deserialize_with = "Option::deserialize")]
    pub spam_report: Option<serde_json::Value>,
    /// Receiving server could not or would not accept message.
    #[serde(rename = "bounce", deserialize_with = "Option::deserialize")]
    pub bounce: Option<serde_json::Value>,
    /// Recipient's email server temporarily rejected message.
    #[serde(rename = "deferred", deserialize_with = "Option::deserialize")]
    pub deferred: Option<serde_json::Value>,
    /// Recipient clicked on message's subscription management link. You need to enable Subscription Tracking for getting this type of event.
    #[serde(rename = "unsubscribe", deserialize_with = "Option::deserialize")]
    pub unsubscribe: Option<serde_json::Value>,
    /// Message has been received and is ready to be delivered.
    #[serde(rename = "processed", deserialize_with = "Option::deserialize")]
    pub processed: Option<serde_json::Value>,
    /// Recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event.
    #[serde(rename = "open", deserialize_with = "Option::deserialize")]
    pub open: Option<serde_json::Value>,
    /// Recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event.
    #[serde(rename = "click", deserialize_with = "Option::deserialize")]
    pub click: Option<serde_json::Value>,
    /// You may see the following drop reasons: Invalid SMTPAPI header, Spam Content (if spam checker app enabled), Unsubscribed Address, Bounced Address, Spam Reporting Address, Invalid, Recipient List over Package Quota
    #[serde(rename = "dropped", deserialize_with = "Option::deserialize")]
    pub dropped: Option<serde_json::Value>,
    /// The client ID Twilio SendGrid sends to your OAuth server or service provider to generate an OAuth access token. When passing data in this field, you must also include the oauth_token_url field.
    #[serde(rename = "oauth_client_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub oauth_client_id: Option<Option<serde_json::Value>>,
    /// The URL where Twilio SendGrid sends the Client ID and Client Secret to generate an access token. This should be your OAuth server or service provider. When passing data in this field, you must also include the oauth_client_id field.
    #[serde(rename = "oauth_token_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub oauth_token_url: Option<Option<serde_json::Value>>,
}

impl WebhooksEventWebhookRequest {
    pub fn new(enabled: Option<serde_json::Value>, url: Option<serde_json::Value>, group_resubscribe: Option<serde_json::Value>, delivered: Option<serde_json::Value>, group_unsubscribe: Option<serde_json::Value>, spam_report: Option<serde_json::Value>, bounce: Option<serde_json::Value>, deferred: Option<serde_json::Value>, unsubscribe: Option<serde_json::Value>, processed: Option<serde_json::Value>, open: Option<serde_json::Value>, click: Option<serde_json::Value>, dropped: Option<serde_json::Value>) -> WebhooksEventWebhookRequest {
        WebhooksEventWebhookRequest {
            enabled,
            url,
            group_resubscribe,
            delivered,
            group_unsubscribe,
            spam_report,
            bounce,
            deferred,
            unsubscribe,
            processed,
            open,
            click,
            dropped,
            oauth_client_id: None,
            oauth_token_url: None,
        }
    }
}


