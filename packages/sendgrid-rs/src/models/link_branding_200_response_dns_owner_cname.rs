/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LinkBranding200ResponseDnsOwnerCname : The DNS record generated to verify who created the link branding.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LinkBranding200ResponseDnsOwnerCname {
    /// Indicates if the DNS record is valid.
    #[serde(rename = "valid", deserialize_with = "Option::deserialize")]
    pub valid: Option<Valid>,
    /// The type of DNS record generated.
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<RHashType>>,
    /// Used to verify the link branding. The subdomain of this domain is the ID of the user who created the link branding.
    #[serde(rename = "host", deserialize_with = "Option::deserialize")]
    pub host: Option<serde_json::Value>,
    /// The domain that the DNS record points to.
    #[serde(rename = "data", deserialize_with = "Option::deserialize")]
    pub data: Option<serde_json::Value>,
}

impl LinkBranding200ResponseDnsOwnerCname {
    /// The DNS record generated to verify who created the link branding.
    pub fn new(valid: Option<Valid>, host: Option<serde_json::Value>, data: Option<serde_json::Value>) -> LinkBranding200ResponseDnsOwnerCname {
        LinkBranding200ResponseDnsOwnerCname {
            valid,
            r#type: None,
            host,
            data,
        }
    }
}

/// Indicates if the DNS record is valid.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Valid {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

impl Default for Valid {
    fn default() -> Valid {
        Self::True
    }
}
/// The type of DNS record generated.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "cname")]
    Cname,
    #[serde(rename = "txt")]
    Txt,
    #[serde(rename = "mx")]
    Mx,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Cname
    }
}

