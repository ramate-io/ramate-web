/*
 * Email Activity (beta)
 *
 * The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data. The Beta endpoints for the new Email Activity APIs - functionality is subject to change without notice. You may not have access to this Beta endpoint.  Email Activity offers filtering and search by event type for two days worth of data. There is an optional add-on to store 60 days worth of data. This add-on also gives you access to the ability to download a CSV of the 60 days worth of email event data.
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContactDetails2 {
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    #[serde(rename = "first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "unique_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unique_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<serde_json::Value>>,
    #[serde(rename = "alternate_emails", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub alternate_emails: Option<Option<serde_json::Value>>,
    #[serde(rename = "address_line_1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_line_1: Option<Option<serde_json::Value>>,
    #[serde(rename = "address_line_2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_line_2: Option<Option<serde_json::Value>>,
    #[serde(rename = "city", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub city: Option<Option<serde_json::Value>>,
    #[serde(rename = "state_province_region", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state_province_region: Option<Option<serde_json::Value>>,
    #[serde(rename = "country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country: Option<Option<serde_json::Value>>,
    #[serde(rename = "postal_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<Option<serde_json::Value>>,
    #[serde(rename = "phone_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<Option<serde_json::Value>>,
    #[serde(rename = "whatsapp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub whatsapp: Option<Option<serde_json::Value>>,
    #[serde(rename = "line", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub line: Option<Option<serde_json::Value>>,
    #[serde(rename = "facebook", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub facebook: Option<Option<serde_json::Value>>,
    #[serde(rename = "list_ids", deserialize_with = "Option::deserialize")]
    pub list_ids: Option<serde_json::Value>,
    #[serde(rename = "segment_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub segment_ids: Option<Option<serde_json::Value>>,
    #[serde(rename = "custom_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Option<serde_json::Value>>,
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<serde_json::Value>,
    #[serde(rename = "_metadata", skip_serializing_if = "Option::is_none")]
    pub _metadata: Option<Box<crate::models::Selfmetadata>>,
}

impl ContactDetails2 {
    pub fn new(id: Option<serde_json::Value>, list_ids: Option<serde_json::Value>, created_at: Option<serde_json::Value>, updated_at: Option<serde_json::Value>) -> ContactDetails2 {
        ContactDetails2 {
            id,
            first_name: None,
            last_name: None,
            unique_name: None,
            email: None,
            alternate_emails: None,
            address_line_1: None,
            address_line_2: None,
            city: None,
            state_province_region: None,
            country: None,
            postal_code: None,
            phone_number: None,
            whatsapp: None,
            line: None,
            facebook: None,
            list_ids,
            segment_ids: None,
            custom_fields: None,
            created_at,
            updated_at,
            _metadata: None,
        }
    }
}


